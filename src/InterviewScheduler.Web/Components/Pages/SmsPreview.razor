@page "/sms-preview"
@attribute [Authorize]
@using InterviewScheduler.Core.Entities
@using InterviewScheduler.Core.Interfaces
@using InterviewScheduler.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject ISmsService SmsService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>SMS Preview</PageTitle>

<h1>SMS Link Generator & Preview</h1>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>Test SMS Generator</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Contact</label>
                    <select class="form-control" @bind="selectedContactId">
                        <option value="">Select a contact</option>
                        @foreach (var contact in contacts)
                        {
                            <option value="@contact.Id">
                                @contact.Salutation @contact.FullName 
                                @if (!string.IsNullOrEmpty(contact.PhoneNumber))
                                {
                                    <text>(@contact.PhoneNumber)</text>
                                }
                                else if (contact.IsMinor && contact.HeadOfHouse != null && !string.IsNullOrEmpty(contact.HeadOfHouse.PhoneNumber))
                                {
                                    <text>(Minor - Parent: @contact.HeadOfHouse.PhoneNumber)</text>
                                }
                            </option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Leader</label>
                    <select class="form-control" @bind="selectedLeaderId">
                        <option value="">Select a leader</option>
                        @foreach (var leader in leaders)
                        {
                            <option value="@leader.Id">@leader.Name (@leader.Title)</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Appointment Type</label>
                    <select class="form-control" @bind="selectedAppointmentTypeId">
                        <option value="">Select appointment type</option>
                        @foreach (var type in appointmentTypes)
                        {
                            <option value="@type.Id">@type.Name</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Appointment Date & Time</label>
                    <input type="datetime-local" class="form-control" @bind="appointmentDateTime" />
                </div>

                <button class="btn btn-primary" @onclick="GeneratePreview" 
                        disabled="@(selectedContact == null || selectedLeader == null || selectedAppointmentType == null)">
                    Generate SMS Preview
                </button>
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-header">
                <h3>Phone Number Validator</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Test Phone Number</label>
                    <input type="text" class="form-control" @bind="testPhoneNumber" @bind:event="oninput" 
                           placeholder="Enter phone number to validate" />
                </div>

                @if (!string.IsNullOrWhiteSpace(testPhoneNumber))
                {
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Original:</strong> @testPhoneNumber
                        </div>
                        <div class="col-md-6">
                            <strong>Sanitized:</strong> @SmsService.SanitizePhoneNumber(testPhoneNumber)
                        </div>
                    </div>
                    <div class="mt-2">
                        @if (SmsService.IsValidPhoneNumber(testPhoneNumber))
                        {
                            <span class="badge bg-success">✓ Valid Phone Number</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">✗ Invalid Phone Number</span>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">
        @if (generatedMessages.Any())
        {
            <div class="card">
                <div class="card-header">
                    <h3>Generated SMS Messages (@generatedMessages.Count)</h3>
                </div>
                <div class="card-body">
                    @foreach (var message in generatedMessages)
                    {
                        <div class="card mb-3 @(message.IsMinorNotification ? "border-info" : "border-primary")">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <span>
                                    <strong>@message.ContactName</strong>
                                    @if (message.IsMinorNotification)
                                    {
                                        <span class="badge bg-info ms-2">Parent Notification</span>
                                    }
                                </span>
                                <small class="text-muted">@message.PhoneNumber</small>
                            </div>
                            <div class="card-body">
                                <p class="card-text">@message.Message</p>
                                
                                <div class="d-flex gap-2">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => CopyToClipboard(message.Message)">
                                        <i class="bi bi-clipboard"></i> Copy Message
                                    </button>
                                    <button class="btn btn-sm btn-outline-success" @onclick="() => OpenSmsLink(message.SmsLink)">
                                        <i class="bi bi-phone"></i> Open SMS App
                                    </button>
                                    <button class="btn btn-sm btn-outline-info" @onclick="() => CopyToClipboard(message.SmsLink)">
                                        <i class="bi bi-link-45deg"></i> Copy SMS Link
                                    </button>
                                </div>
                                
                                <details class="mt-2">
                                    <summary class="text-muted">Show SMS Link</summary>
                                    <small class="text-break">@message.SmsLink</small>
                                </details>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <div class="card-body text-center text-muted">
                    <i class="bi bi-chat-text" style="font-size: 3rem;"></i>
                    <h5 class="mt-3">No Messages Generated</h5>
                    <p>Select contact, leader, and appointment details to generate SMS preview</p>
                </div>
            </div>
        }
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h3>SMS Link Format Information</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h5>Supported Formats</h5>
                        <ul>
                            <li><code>sms:+1234567890?body=message</code> - Standard SMS URI</li>
                            <li><code>sms:+1234567890&body=message</code> - Alternative format</li>
                            <li>Works with most mobile devices and SMS apps</li>
                            <li>Message content is URL-encoded for safety</li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h5>Phone Number Processing</h5>
                        <ul>
                            <li>Automatically adds +1 for US numbers</li>
                            <li>Removes formatting characters (spaces, dashes, parentheses)</li>
                            <li>Validates against US and international formats</li>
                            <li>Supports 10-digit US numbers and international format</li>
                        </ul>
                    </div>
                </div>
                
                <div class="mt-3">
                    <h5>Message Template Variables</h5>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Variable</th>
                                    <th>Description</th>
                                    <th>Example</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><code>{ContactName}</code></td>
                                    <td>Contact's salutation and full name</td>
                                    <td>Brother John Smith</td>
                                </tr>
                                <tr>
                                    <td><code>{LeaderName}</code></td>
                                    <td>Leader's name</td>
                                    <td>Bishop Johnson</td>
                                </tr>
                                <tr>
                                    <td><code>{LeaderTitle}</code></td>
                                    <td>Leader's title</td>
                                    <td>Bishop</td>
                                </tr>
                                <tr>
                                    <td><code>{DateTime}</code></td>
                                    <td>Full date and time</td>
                                    <td>Monday, January 15 at 2:00 PM</td>
                                </tr>
                                <tr>
                                    <td><code>{Date}</code></td>
                                    <td>Date only</td>
                                    <td>Monday, January 15</td>
                                </tr>
                                <tr>
                                    <td><code>{Time}</code></td>
                                    <td>Time only</td>
                                    <td>2:00 PM</td>
                                </tr>
                                <tr>
                                    <td><code>{Duration}</code></td>
                                    <td>Appointment duration in minutes</td>
                                    <td>30</td>
                                </tr>
                                <tr>
                                    <td><code>{AppointmentType}</code></td>
                                    <td>Type of appointment</td>
                                    <td>Temple Recommend Interview</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Contact> contacts = new();
    private List<Leader> leaders = new();
    private List<AppointmentType> appointmentTypes = new();
    private List<SmsMessage> generatedMessages = new();

    private int? selectedContactId;
    private int? selectedLeaderId;
    private int? selectedAppointmentTypeId;
    private DateTime appointmentDateTime = DateTime.Now.AddDays(1);
    private string testPhoneNumber = "";

    private Contact? selectedContact => selectedContactId.HasValue ? contacts.FirstOrDefault(c => c.Id == selectedContactId.Value) : null;
    private Leader? selectedLeader => selectedLeaderId.HasValue ? leaders.FirstOrDefault(l => l.Id == selectedLeaderId.Value) : null;
    private AppointmentType? selectedAppointmentType => selectedAppointmentTypeId.HasValue ? appointmentTypes.FirstOrDefault(t => t.Id == selectedAppointmentTypeId.Value) : null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        contacts = await DbContext.Contacts
            .Include(c => c.HeadOfHouse)
            .Where(c => !string.IsNullOrEmpty(c.PhoneNumber) || 
                       (c.HeadOfHouse != null && !string.IsNullOrEmpty(c.HeadOfHouse.PhoneNumber)))
            .OrderBy(c => c.LastName)
            .ThenBy(c => c.FirstName)
            .ToListAsync();

        // Filter minors in memory after data is loaded
        contacts = contacts.Where(c => !string.IsNullOrEmpty(c.PhoneNumber) || 
                                      (c.IsMinor && c.HeadOfHouse != null && !string.IsNullOrEmpty(c.HeadOfHouse.PhoneNumber)))
                           .ToList();

        leaders = await DbContext.Leaders
            .Where(l => l.IsActive)
            .OrderBy(l => l.Title)
            .ToListAsync();

        appointmentTypes = await DbContext.AppointmentTypes
            .OrderBy(t => t.Name)
            .ToListAsync();
    }

    private void GeneratePreview()
    {
        if (selectedContact == null || selectedLeader == null || selectedAppointmentType == null)
            return;

        var contactsList = new List<Contact> { selectedContact };
        generatedMessages = SmsService.GenerateAppointmentMessages(contactsList, selectedLeader, selectedAppointmentType, appointmentDateTime);
    }

    private async Task CopyToClipboard(string text)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        await JSRuntime.InvokeVoidAsync("alert", "Copied to clipboard!");
    }

    private async Task OpenSmsLink(string smsLink)
    {
        await JSRuntime.InvokeVoidAsync("open", smsLink, "_blank");
    }
}