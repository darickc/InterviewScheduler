@page "/appointments/new"
@attribute [Authorize]
@using InterviewScheduler.Core.Entities
@using InterviewScheduler.Core.Enums
@using InterviewScheduler.Core.Interfaces
@using InterviewScheduler.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject ICalendarService CalendarService
@inject ISmsService SmsService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<AppointmentWizard> Logger
@inject IUserService UserService
@rendermode InteractiveServer

<PageTitle>Schedule Appointment</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <h1>Schedule New Appointment</h1>
            
            <!-- Progress Bar -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="progress mb-3">
                        <div class="progress-bar" role="progressbar" style="width: @(((currentStep - 1) * 100 / 3))%" 
                             aria-valuenow="@currentStep" aria-valuemin="0" aria-valuemax="4"></div>
                    </div>
                    <div class="row text-center">
                        <div class="col step @(currentStep >= 1 ? "active" : "")">
                            <span class="step-number">1</span>
                            <br><small>Select Contacts</small>
                        </div>
                        <div class="col step @(currentStep >= 2 ? "active" : "")">
                            <span class="step-number">2</span>
                            <br><small>Choose Leaders</small>
                        </div>
                        <div class="col step @(currentStep >= 3 ? "active" : "")">
                            <span class="step-number">3</span>
                            <br><small>Appointment Details</small>
                        </div>
                        <div class="col step @(currentStep >= 4 ? "active" : "")">
                            <span class="step-number">4</span>
                            <br><small>Review & Send</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Step Content -->
            @if (currentStep == 1)
            {
                <!-- Step 1: Select Contacts -->
                <div class="card">
                    <div class="card-header">
                        <h3>Step 1: Select Contacts</h3>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <input type="text" class="form-control" placeholder="Search contacts..."
                                       @bind="contactSearchTerm" @bind:event="oninput" />
                            </div>
                            <div class="col-md-3">
                                <select class="form-control" @bind="contactGenderFilter">
                                    <option value="">All Genders</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <select class="form-control" @bind="contactAgeFilter">
                                    <option value="">All Ages</option>
                                    <option value="minor">Minors (≤17)</option>
                                    <option value="adult">Adults (18+)</option>
                                </select>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <h5>Available Contacts</h5>
                                <div class="list-group" style="max-height: 400px; overflow-y: auto;">
                                    @foreach (var contact in filteredContacts)
                                    {
                                        <div class="list-group-item d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>@contact.FullName</strong>
                                                <br><small>@contact.PhoneNumber • Age: @contact.Age @(contact.IsMinor ? "(Minor)" : "")</small>
                                                @if (contact.HeadOfHouse != null)
                                                {
                                                    <br><small class="text-muted">Head of House: @contact.HeadOfHouse.FullName</small>
                                                }
                                            </div>
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => SelectContact(contact)">
                                                Select
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-6">
                                <h5>Selected Contacts (@selectedContacts.Count)</h5>
                                @if (selectedContacts.Any())
                                {
                                    <div class="list-group">
                                        @foreach (var contact in selectedContacts)
                                        {
                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                <div>
                                                    <strong>@contact.FullName</strong>
                                                    <br><small>@contact.PhoneNumber</small>
                                                    @if (contact.IsMinor)
                                                    {
                                                        <span class="badge bg-info ms-2">Minor - Parent will be notified</span>
                                                    }
                                                </div>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveContact(contact)">
                                                    Remove
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p class="text-muted">No contacts selected</p>
                                }
                            </div>
                        </div>

                        <div class="mt-3">
                            <button class="btn btn-primary" @onclick="NextStep" disabled="@(!selectedContacts.Any())">
                                Next: Choose Leaders
                            </button>
                        </div>
                    </div>
                </div>
            }
            else if (currentStep == 2)
            {
                <!-- Step 2: Choose Leaders -->
                <div class="card">
                    <div class="card-header">
                        <h3>Step 2: Choose Leaders</h3>
                        <p class="mb-0">Select one or more leaders for scheduling appointments. The system will automatically distribute contacts across available time slots.</p>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <h5>Available Leaders</h5>
                                <div class="row">
                                    @foreach (var leader in activeLeaders)
                                    {
                                        <div class="col-md-6 mb-3">
                                            <div class="card @(selectedLeaders.Contains(leader) ? "border-primary" : "")">
                                                <div class="card-body">
                                                    <h6>@leader.Name</h6>
                                                    <p class="text-muted small mb-2">@leader.Title</p>
                                                    @if (!string.IsNullOrEmpty(leader.GoogleCalendarId))
                                                    {
                                                        <small class="text-success">
                                                            <i class="bi bi-calendar-check"></i> Calendar Available
                                                        </small>
                                                    }
                                                    else
                                                    {
                                                        <small class="text-warning">
                                                            <i class="bi bi-calendar-x"></i> No Calendar
                                                        </small>
                                                    }
                                                    <br>
                                                    <button class="btn @(selectedLeaders.Contains(leader) ? "btn-primary" : "btn-outline-primary") btn-sm mt-2"
                                                            @onclick="() => ToggleLeader(leader)">
                                                        @(selectedLeaders.Contains(leader) ? "Remove" : "Select")
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-md-4">
                                <h5>Selected Leaders (@selectedLeaders.Count)</h5>
                                @if (selectedLeaders.Any())
                                {
                                    <div class="list-group">
                                        @foreach (var leader in selectedLeaders)
                                        {
                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                <div>
                                                    <strong>@leader.Name</strong>
                                                    <br><small>@leader.Title</small>
                                                </div>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ToggleLeader(leader)">
                                                    Remove
                                                </button>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p class="text-muted">No leaders selected</p>
                                }
                            </div>
                        </div>

                        <div class="mt-3">
                            <button class="btn btn-secondary me-2" @onclick="PreviousStep">Previous</button>
                            <button class="btn btn-primary" @onclick="NextStep" disabled="@(!selectedLeaders.Any())">
                                Next: Appointment Details
                            </button>
                        </div>
                    </div>
                </div>
            }
            else if (currentStep == 3)
            {
                <!-- Step 3: Appointment Details -->
                <div class="card">
                    <div class="card-header">
                        <h3>Step 3: Appointment Details</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Appointment Type *</label>
                                    <select class="form-control" @bind="selectedAppointmentTypeId">
                                        <option value="">Select appointment type</option>
                                        @foreach (var type in appointmentTypes)
                                        {
                                            <option value="@type.Id">@type.Name (@type.Duration minutes)</option>
                                        }
                                    </select>
                                </div>

                                @if (selectedAppointmentType != null)
                                {
                                    <div class="alert alert-info">
                                        <strong>Duration:</strong> @selectedAppointmentType.Duration minutes<br>
                                        <strong>Message Template (Adults):</strong><br>
                                        <small>@selectedAppointmentType.MessageTemplate</small>
                                        <br><br>
                                        <strong>Message Template (Minors/Parents):</strong><br>
                                        <small>@selectedAppointmentType.MinorMessageTemplate</small>
                                    </div>
                                }
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Appointment Date</label>
                                    <input type="date" class="form-control" @bind="appointmentDate" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                                    <small class="form-text text-muted">Select the date for the appointment</small>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Time Range</label>
                                    <div class="row">
                                        <div class="col-6">
                                            <input type="time" class="form-control" @bind="startTime" />
                                            <small class="form-text text-muted">Start Time</small>
                                        </div>
                                        <div class="col-6">
                                            <input type="time" class="form-control" @bind="endTime" />
                                            <small class="form-text text-muted">End Time</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mt-3">
                            <button class="btn btn-secondary me-2" @onclick="PreviousStep">Previous</button>
                            <button class="btn btn-primary" @onclick="NextStep" disabled="@(selectedAppointmentType == null || appointmentDate == default || startTime == default || endTime == default)">
                                Next: Review & Send
                            </button>
                        </div>
                    </div>
                </div>
            }
            else if (currentStep == 4)
            {
                <!-- Step 4: Review & Send -->
                <div class="card">
                    <div class="card-header">
                        <h3>Step 4: Review & Send Notifications</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h5>Appointment Summary</h5>
                                <table class="table">
                                    <tr>
                                        <td><strong>Leaders:</strong></td>
                                        <td>@string.Join(", ", selectedLeaders.Select(l => $"{l.Name} ({l.Title})"))</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Type:</strong></td>
                                        <td>@selectedAppointmentType?.Name</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Starting Time:</strong></td>
                                        <td>@appointmentDate.ToString("dddd, MMMM dd, yyyy") at @startTime.ToString("h:mm tt")</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Duration:</strong></td>
                                        <td>@selectedAppointmentType?.Duration minutes</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Contacts:</strong></td>
                                        <td>@selectedContacts.Count contact(s)</td>
                                    </tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h5>SMS Messages Preview</h5>
                                @if (previewMessages.Any())
                                {
                                    @foreach (var message in previewMessages)
                                    {
                                        <div class="card mb-2 @(message.IsMinorNotification ? "border-info" : "border-primary")">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div>
                                                        <h6>@message.ContactName</h6>
                                                        @if (message.IsMinorNotification)
                                                        {
                                                            <span class="badge bg-info">Parent Notification</span>
                                                        }
                                                    </div>
                                                    <small class="text-muted">@message.PhoneNumber</small>
                                                </div>
                                                <p class="mt-2">@message.Message</p>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted">Message preview will appear here</p>
                                }
                                
                                @if (selectedContacts.Any(c => c.IsMinor))
                                {
                                    <div class="alert alert-info">
                                        <strong>Note:</strong> Parents of minors will also receive notification messages.
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="mt-3">
                            <button class="btn btn-secondary me-2" @onclick="PreviousStep">Previous</button>
                            <button class="btn btn-success" @onclick="CreateAppointment" disabled="@isCreatingAppointment">
                                @if (isCreatingAppointment)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Create Appointment & Send Messages
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .step {
        position: relative;
    }
    
    .step-number {
        display: inline-block;
        width: 30px;
        height: 30px;
        line-height: 30px;
        border-radius: 50%;
        background-color: #e9ecef;
        color: #6c757d;
        font-weight: bold;
    }
    
    .step.active .step-number {
        background-color: #0d6efd;
        color: white;
    }
    
    .step.active {
        color: #0d6efd;
        font-weight: bold;
    }
</style>

@code {
    // Navigation
    private int currentStep = 1;
    
    // Data collections
    private List<Contact> allContacts = new();
    private List<Leader> activeLeaders = new();
    private List<AppointmentType> appointmentTypes = new();
    private List<SmsMessage> previewMessages = new();
    
    // Selections
    private List<Contact> selectedContacts = new();
    private List<Leader> selectedLeaders = new();
    
    // Filters and search
    private string contactSearchTerm = "";
    private string contactGenderFilter = "";
    private string contactAgeFilter = "";
    
    // Form data
    private int? selectedAppointmentTypeId;
    private DateTime appointmentDate = GetNextSunday();
    private TimeOnly startTime = new TimeOnly(9, 0); // 9:00 AM
    private TimeOnly endTime = new TimeOnly(17, 0); // 5:00 PM
    
    // State
    private bool isCreatingAppointment = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null) return;
        
        allContacts = await DbContext.Contacts
            .Include(c => c.HeadOfHouse)
            .Include(c => c.Spouse)
            .Where(c => c.UserId == currentUser.Id)
            .OrderBy(c => c.LastName)
            .ThenBy(c => c.FirstName)
            .ToListAsync();

        activeLeaders = await DbContext.Leaders
            .Where(l => l.IsActive && l.UserId == currentUser.Id)
            .OrderBy(l => l.Title)
            .ToListAsync();

        appointmentTypes = await DbContext.AppointmentTypes
            .Where(t => t.UserId == currentUser.Id)
            .OrderBy(t => t.Name)
            .ToListAsync();
    }

    private IEnumerable<Contact> filteredContacts
    {
        get
        {
            var filtered = allContacts.Where(c => !selectedContacts.Contains(c));

            if (!string.IsNullOrWhiteSpace(contactSearchTerm))
            {
                filtered = filtered.Where(c =>
                    c.FirstName.Contains(contactSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (!string.IsNullOrEmpty(c.MiddleName) && c.MiddleName.Contains(contactSearchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    c.LastName.Contains(contactSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (c.PhoneNumber != null && c.PhoneNumber.Contains(contactSearchTerm)));
            }

            if (!string.IsNullOrWhiteSpace(contactGenderFilter))
            {
                filtered = filtered.Where(c => c.Gender.ToString() == contactGenderFilter);
            }

            if (!string.IsNullOrWhiteSpace(contactAgeFilter))
            {
                filtered = contactAgeFilter switch
                {
                    "minor" => filtered.Where(c => c.IsMinor),
                    "adult" => filtered.Where(c => !c.IsMinor),
                    _ => filtered
                };
            }

            return filtered;
        }
    }

    private AppointmentType? selectedAppointmentType => 
        selectedAppointmentTypeId.HasValue ? appointmentTypes.FirstOrDefault(t => t.Id == selectedAppointmentTypeId.Value) : null;

    private static DateTime GetNextSunday()
    {
        var today = DateTime.Today;
        var daysUntilSunday = ((int)DayOfWeek.Sunday - (int)today.DayOfWeek + 7) % 7;
        return daysUntilSunday == 0 ? today.AddDays(7) : today.AddDays(daysUntilSunday); // If today is Sunday, get next Sunday
    }

    // Navigation methods
    private void NextStep()
    {
        if (currentStep == 3)
        {
            GenerateSmsPreview();
        }
        currentStep++;
    }

    private void PreviousStep()
    {
        currentStep--;
    }

    // Selection methods
    private void SelectContact(Contact contact)
    {
        selectedContacts.Add(contact);
    }

    private void RemoveContact(Contact contact)
    {
        selectedContacts.Remove(contact);
    }

    private void ToggleLeader(Leader leader)
    {
        if (selectedLeaders.Contains(leader))
        {
            selectedLeaders.Remove(leader);
        }
        else
        {
            selectedLeaders.Add(leader);
        }
    }


    private void GenerateSmsPreview()
    {
        if (selectedContacts.Count == 0 || !selectedLeaders.Any() || selectedAppointmentType == null)
        {
            previewMessages = new List<SmsMessage>();
            return;
        }

        // Generate preview messages for automatic scheduling
        previewMessages = GenerateAutoSchedulePreview();
    }

    private List<SmsMessage> GenerateAutoSchedulePreview()
    {
        var messages = new List<SmsMessage>();
        var scheduledAppointments = GenerateSchedulePlan();
        
        foreach (var scheduled in scheduledAppointments)
        {
            var contact = selectedContacts.First(c => c.Id == scheduled.ContactId);
            var leader = selectedLeaders.First(l => l.Id == scheduled.LeaderId);
            
            var contactMessages = SmsService.GenerateAppointmentMessages(
                new List<Contact> { contact }, 
                leader, 
                selectedAppointmentType!, 
                scheduled.ScheduledTime);
            
            messages.AddRange(contactMessages);
        }
        
        return messages;
    }

    private List<ScheduledAppointment> GenerateSchedulePlan()
    {
        var plan = new List<ScheduledAppointment>();
        var currentTime = appointmentDate.Date.Add(startTime.ToTimeSpan());
        var appointmentDuration = selectedAppointmentType!.Duration;
        var searchEnd = appointmentDate.Date.Add(endTime.ToTimeSpan());
        
        var scheduledTimes = new HashSet<(int leaderId, DateTime time)>(); // Track scheduled appointments per leader
        
        foreach (var contact in selectedContacts)
        {
            var assigned = false;
            var timeToTry = currentTime;
            
            // Try to find an available slot starting from current time
            while (!assigned && timeToTry.AddMinutes(appointmentDuration) <= searchEnd)
            {
                // Check if any leader is available at this time
                foreach (var leader in selectedLeaders)
                {
                    var slotKey = (leader.Id, timeToTry);
                    
                    // Check if this leader already has an appointment at this time
                    if (!scheduledTimes.Contains(slotKey))
                    {
                        // For preview purposes, assume available (real check happens during creation)
                        plan.Add(new ScheduledAppointment
                        {
                            ContactId = contact.Id,
                            LeaderId = leader.Id,
                            ScheduledTime = timeToTry
                        });
                        
                        scheduledTimes.Add(slotKey);
                        assigned = true;
                        break; // Found a leader for this contact, move to next contact
                    }
                }
                
                if (!assigned)
                {
                    // No leader available at this time, try next time slot
                    timeToTry = timeToTry.AddMinutes(appointmentDuration);
                }
            }
            
            if (!assigned)
            {
                // Could not schedule this contact - no more available slots
                break;
            }
            
            // For the next contact, try the same time first (in case multiple leaders are available)
            // If not available, the algorithm will naturally move to the next time slot
        }
        
        return plan;
    }

    private class ScheduledAppointment
    {
        public int ContactId { get; set; }
        public int LeaderId { get; set; }
        public DateTime ScheduledTime { get; set; }
    }

    private async Task CreateAppointment()
    {
        if (selectedContacts.Count == 0 || !selectedLeaders.Any() || selectedAppointmentType == null)
            return;

        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null) return;

        isCreatingAppointment = true;
        try
        {
            // Generate the scheduling plan with real availability checking
            var schedulePlan = await GenerateRealSchedulePlan();
            var appointmentsCreated = 0;
            var calendarEventsCreated = 0;
            var unscheduledContacts = new List<string>();

            // Create appointments based on the schedule plan
            foreach (var scheduled in schedulePlan)
            {
                var appointment = new Appointment
                {
                    ContactId = scheduled.ContactId,
                    LeaderId = scheduled.LeaderId,
                    AppointmentTypeId = selectedAppointmentType.Id,
                    ScheduledTime = scheduled.ScheduledTime,
                    Status = AppointmentStatus.Pending,
                    CreatedDate = DateTime.Now,
                    UserId = currentUser.Id
                };

                DbContext.Appointments.Add(appointment);
                appointmentsCreated++;
            }

            // Check for unscheduled contacts
            var scheduledContactIds = schedulePlan.Select(s => s.ContactId).ToHashSet();
            foreach (var contact in selectedContacts)
            {
                if (!scheduledContactIds.Contains(contact.Id))
                {
                    unscheduledContacts.Add($"{contact.FullName}");
                }
            }

            await DbContext.SaveChangesAsync();

            // Create calendar events for each scheduled appointment
            foreach (var scheduled in schedulePlan)
            {
                var leader = selectedLeaders.First(l => l.Id == scheduled.LeaderId);
                
                if (!string.IsNullOrEmpty(leader.GoogleCalendarId))
                {
                    try
                    {
                        var appointment = await DbContext.Appointments
                            .Include(a => a.Contact)
                            .Include(a => a.Leader)
                            .Include(a => a.AppointmentType)
                            .FirstOrDefaultAsync(a => a.ContactId == scheduled.ContactId && 
                                                      a.LeaderId == scheduled.LeaderId &&
                                                      a.ScheduledTime == scheduled.ScheduledTime);

                        if (appointment != null)
                        {
                            var eventId = await CalendarService.CreateEventAsync(leader.GoogleCalendarId, appointment);
                            if (!string.IsNullOrEmpty(eventId))
                            {
                                appointment.GoogleEventId = eventId;
                                calendarEventsCreated++;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        // Log calendar creation failure but continue
                        Logger.LogError(ex, $"Failed to create calendar event for {leader.Name}");
                    }
                }
            }

            await DbContext.SaveChangesAsync();

            // Generate success message
            var message = $"Automatic scheduling completed!\n\n";
            message += $"✅ {appointmentsCreated} appointments created\n";
            message += $"📅 {calendarEventsCreated} calendar events created\n";
            
            if (unscheduledContacts.Any())
            {
                message += $"\n⚠️ Could not schedule {unscheduledContacts.Count} contact(s):\n";
                message += string.Join("\n", unscheduledContacts);
                message += "\n\nPlease try:\n- Selecting a different time range\n- Adding more leaders\n- Choosing a different date";
            }
            else
            {
                message += "\n🎉 All contacts successfully scheduled!";
            }

            await JSRuntime.InvokeVoidAsync("alert", message);
            Navigation.NavigateTo("/appointments");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating appointments: {ex.Message}");
        }
        finally
        {
            isCreatingAppointment = false;
        }
    }

    private async Task<List<ScheduledAppointment>> GenerateRealSchedulePlan()
    {
        var plan = new List<ScheduledAppointment>();
        var currentTime = appointmentDate.Date.Add(startTime.ToTimeSpan());
        var appointmentDuration = selectedAppointmentType!.Duration;
        var searchEnd = appointmentDate.Date.Add(endTime.ToTimeSpan());
        
        var scheduledTimes = new HashSet<(int leaderId, DateTime time)>(); // Track scheduled appointments per leader
        
        foreach (var contact in selectedContacts)
        {
            var assigned = false;
            var timeToTry = currentTime;
            
            // Try to find an available slot starting from current time
            while (!assigned && timeToTry.AddMinutes(appointmentDuration) <= searchEnd)
            {
                // Check if any leader is available at this time
                foreach (var leader in selectedLeaders)
                {
                    var slotKey = (leader.Id, timeToTry);
                    
                    // Check if this leader already has an appointment at this time
                    if (!scheduledTimes.Contains(slotKey))
                    {
                        // Check if leader is actually available at this time
                        var isAvailable = await IsLeaderAvailableAtTime(leader, timeToTry, appointmentDuration);
                        
                        if (isAvailable)
                        {
                            plan.Add(new ScheduledAppointment
                            {
                                ContactId = contact.Id,
                                LeaderId = leader.Id,
                                ScheduledTime = timeToTry
                            });
                            
                            scheduledTimes.Add(slotKey);
                            assigned = true;
                            break; // Found a leader for this contact, move to next contact
                        }
                    }
                }
                
                if (!assigned)
                {
                    // No leader available at this time, try next time slot
                    timeToTry = timeToTry.AddMinutes(appointmentDuration);
                }
            }
            
            if (!assigned)
            {
                // Could not schedule this contact - no more available slots
                break;
            }
            
            // For the next contact, try the same time first (in case multiple leaders are available)
            // If not available, the algorithm will naturally move to the next time slot
        }
        
        return plan;
    }

    private async Task<bool> IsLeaderAvailableAtTime(Leader leader, DateTime startTime, int durationMinutes)
    {
        try
        {
            var endTime = startTime.AddMinutes(durationMinutes);
            
            // Check existing appointments in database
            var hasExistingAppt = await DbContext.Appointments
                .AnyAsync(a => a.LeaderId == leader.Id && 
                             a.ScheduledTime < endTime && 
                             a.ScheduledTime.AddMinutes(selectedAppointmentType!.Duration) > startTime);
            
            if (hasExistingAppt)
                return false;
                
            // Check Google Calendar if available
            if (!string.IsNullOrEmpty(leader.GoogleCalendarId))
            {
                return await CalendarService.IsTimeSlotAvailableAsync(
                    leader.GoogleCalendarId, 
                    startTime, 
                    endTime);
            }
            
            return true; // If no calendar, assume available
        }
        catch
        {
            return false; // If error checking, assume not available for safety
        }
    }
}