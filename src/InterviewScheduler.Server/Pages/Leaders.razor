@page "/leaders"
@attribute [Authorize]
@using InterviewScheduler.Core.Entities
@using InterviewScheduler.Core.Interfaces
@using InterviewScheduler.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@inject ApplicationDbContext DbContext
@inject IUserService UserService
@inject ICalendarService CalendarService
@inject IJSRuntime JSRuntime

<PageTitle>Leaders</PageTitle>

<!-- Mobile Header -->
<div class="sticky top-0 z-30 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border-b border-gray-200/80 dark:border-gray-700/80 px-4 py-3 md:hidden">
    <div class="flex items-center justify-between">
        <h1 class="text-xl font-semibold text-gray-900 dark:text-white">Leaders</h1>
        <div class="flex items-center space-x-2">
            <!-- Search Toggle -->
            <button @onclick="ToggleSearch" class="btn-ghost p-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </button>
        </div>
    </div>
</div>

<!-- Desktop Header -->
<div class="hidden md:block mb-8">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Leader Management</h1>
    <p class="text-gray-600 dark:text-gray-300">Manage ward leaders and their calendar integration</p>
</div>

<!-- Search Bar (Mobile Collapsible) -->
<div class="@(showSearch ? "block" : "hidden md:block") px-4 md:px-0 py-4 md:py-0 bg-gray-50 dark:bg-gray-900 md:bg-transparent border-b border-gray-200 dark:border-gray-700 md:border-0 mb-4">
    <div class="relative">
        <input type="text" 
               class="form-input pl-10" 
               placeholder="Search leaders..."
               @bind="searchTerm" 
               @bind:event="oninput">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
        </div>
    </div>
    <div class="flex items-center justify-between mt-4">
        <span class="text-sm text-gray-600 dark:text-gray-400">
            @filteredLeaders.Count() of @leaders.Count leaders
        </span>
    </div>
</div>

<!-- Leader List -->
<div class="px-4 md:px-0 pb-24 md:pb-0">
    @if (isLoading)
    {
        <!-- Loading Skeleton -->
        <div class="space-y-4">
            @for (int i = 0; i < 3; i++)
            {
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4 animate-pulse">
                    <div class="flex items-center space-x-4">
                        <div class="w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded-full"></div>
                        <div class="flex-1">
                            <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
                            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!filteredLeaders.Any())
    {
        <!-- Empty State -->
        <div class="text-center py-12">
            <svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No leaders found</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">
                @if (string.IsNullOrEmpty(searchTerm))
                {
                    <text>Add your first leader to get started.</text>
                }
                else
                {
                    <text>Try adjusting your search term.</text>
                }
            </p>
            @if (!leaders.Any())
            {
                <button class="btn-primary" @onclick="() => EditLeader(null)">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Add First Leader
                </button>
            }
        </div>
    }
    else
    {
        <!-- Leader Cards -->
        <div class="space-y-3">
            @foreach (var leader in filteredLeaders)
            {
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
                    @RenderLeaderCard(leader, () => EditLeader(leader), () => DeleteLeader(leader), async () => await TestCalendarConnection(leader))
                </div>
            }
        </div>
    }
</div>

<!-- Floating Action Button -->
<button @onclick="() => EditLeader(null)" 
        class="fixed bottom-20 right-4 md:bottom-8 md:right-8 w-14 h-14 bg-primary-600 hover:bg-primary-700 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-200 flex items-center justify-center z-20">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
    </svg>
</button>

<!-- Edit Leader Modal -->
@if (showEditDialog)
{
    <div class="fixed inset-0 bg-gray-900/50 z-40 flex items-end md:items-center justify-center">
        <div class="bg-white dark:bg-gray-800 w-full md:max-w-lg md:mx-4 mobile-modal rounded-t-xl md:rounded-lg shadow-xl transform transition-all duration-300 @(showEditDialog ? "translate-y-0" : "translate-y-full") flex flex-col">
            <div class="flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h2 class="text-lg font-semibold text-gray-900 dark:text-white">
                    @(editingLeader?.Id > 0 ? "Edit Leader" : "Add Leader")
                </h2>
                <button @onclick="CancelEdit" class="btn-ghost p-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <div class="flex-1 overflow-y-auto">
                @if (editingLeader != null)
                {
                    <form @onsubmit="SaveLeader" @onsubmit:preventDefault="true">
                        <div class="mobile-form-section">
                            <!-- Basic Info -->
                            <div class="mobile-input-group">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Name <span class="text-red-500">*</span>
                                </label>
                                <input type="text" class="form-input" @bind="editingLeader.Name" required>
                            </div>

                            <div class="mobile-input-group">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Title <span class="text-red-500">*</span>
                                </label>
                                <select class="form-select" @bind="editingLeader.Title" required>
                                    <option value="">Select Title</option>
                                    <option value="Bishop">Bishop</option>
                                    <option value="1st Counselor">1st Counselor</option>
                                    <option value="2nd Counselor">2nd Counselor</option>
                                    <option value="Executive Secretary">Executive Secretary</option>
                                    <option value="Ward Clerk">Ward Clerk</option>
                                </select>
                            </div>


                            <!-- Calendar Integration -->
                            <div class="mobile-input-group">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                                    Google Calendar
                                </label>
                                <div class="space-y-3">
                                    @if (isLoadingCalendars)
                                    {
                                        <div class="flex items-center text-sm text-blue-600 dark:text-blue-400">
                                            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                                            Loading available calendars...
                                        </div>
                                    }
                                    else if (availableCalendars.Any() && !showManualCalendarEntry)
                                    {
                                        <select class="form-select @(calendarValidationState == "valid" ? "border-green-500" : calendarValidationState == "invalid" ? "border-red-500" : "")" 
                                                value="@editingLeader.GoogleCalendarId" 
                                                @onchange="OnCalendarSelectionChanged">
                                            <option value="">Select a calendar</option>
                                            @foreach (var calendar in availableCalendars)
                                            {
                                                <option value="@calendar.Id">
                                                    @calendar.Name @(calendar.IsPrimary ? "(Primary)" : "")
                                                </option>
                                            }
                                        </select>
                                        
                                        <button type="button" @onclick="() => showManualCalendarEntry = true" 
                                                class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200">
                                            Enter calendar ID manually
                                        </button>
                                    }
                                    else
                                    {
                                        <input type="text" 
                                               class="form-input @(calendarValidationState == "valid" ? "border-green-500" : calendarValidationState == "invalid" ? "border-red-500" : "")" 
                                               @bind="editingLeader.GoogleCalendarId" 
                                               @bind:event="oninput"
                                               @onblur="ValidateCalendarId"
                                               placeholder="your-calendar@gmail.com or calendar-id">
                                        
                                        @if (availableCalendars.Any())
                                        {
                                            <button type="button" @onclick="() => showManualCalendarEntry = false" 
                                                    class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200">
                                                Choose from available calendars
                                            </button>
                                        }
                                    }
                                    
                                    @if (calendarValidationState == "validating")
                                    {
                                        <div class="flex items-center text-sm text-blue-600 dark:text-blue-400">
                                            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
                                            Validating calendar...
                                        </div>
                                    }
                                    else if (calendarValidationState == "valid")
                                    {
                                        <div class="flex items-center text-sm text-green-600 dark:text-green-400">
                                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                            Calendar connection verified
                                        </div>
                                    }
                                    else if (calendarValidationState == "invalid")
                                    {
                                        <div class="flex items-center text-sm text-red-600 dark:text-red-400">
                                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                            Unable to connect to calendar
                                        </div>
                                    }
                                    
                                    <p class="text-xs text-gray-500 dark:text-gray-400">
                                        Select the leader's Google Calendar for appointment scheduling integration.
                                    </p>
                                </div>
                            </div>

                            <!-- Active Status -->
                            <div class="mobile-input-group">
                                <div class="flex items-center">
                                    <input type="checkbox" 
                                           id="isActive" 
                                           class="rounded border-gray-300 text-primary-600 focus:ring-primary-500 touch-target" 
                                           @bind="editingLeader.IsActive">
                                    <label for="isActive" class="ml-3 text-sm text-gray-700 dark:text-gray-300">
                                        Active Leader
                                    </label>
                                </div>
                            </div>
                        </div>

                    </form>
                }
            </div>
            
            <!-- Fixed Footer with Buttons -->
            <div class="mobile-modal-footer rounded-b-xl md:rounded-b-lg">
                <div class="flex gap-3">
                    <button type="button" @onclick="SaveLeader" class="btn-primary flex-1" disabled="@(isSaving)">
                        @if (isSaving)
                        {
                            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        }
                        Save Leader
                    </button>
                    <button type="button" @onclick="CancelEdit" class="btn-secondary flex-1" disabled="@(isSaving)">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteDialog && deletingLeader != null)
{
    <div class="fixed inset-0 bg-gray-900/50 z-50 flex items-end md:items-center justify-center">
        <div class="bg-white dark:bg-gray-800 w-full md:max-w-sm md:mx-4 rounded-t-xl md:rounded-lg shadow-xl transform transition-all duration-300">
            <div class="p-6 text-center">
                <svg class="w-16 h-16 text-red-600 dark:text-red-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Delete Leader?</h3>
                <p class="text-gray-600 dark:text-gray-400 mb-6">
                    Are you sure you want to delete <strong>@deletingLeader.Name</strong>? This action cannot be undone and will affect scheduled appointments.
                </p>
                <div class="flex gap-3">
                    <button @onclick="ConfirmDelete" class="btn-danger flex-1">
                        Delete
                    </button>
                    <button @onclick="CancelDelete" class="btn-secondary flex-1">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Calendar Test Result Modal -->
@if (showCalendarTestDialog)
{
    <div class="fixed inset-0 bg-gray-900/50 z-50 flex items-end md:items-center justify-center">
        <div class="bg-white dark:bg-gray-800 w-full md:max-w-md md:mx-4 rounded-t-xl md:rounded-lg shadow-xl transform transition-all duration-300">
            <div class="flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Calendar Connection Test</h2>
                <button @onclick="() => showCalendarTestDialog = false" class="btn-ghost p-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <div class="p-6">
                @if (calendarTestResult != null)
                {
                    <div class="@(calendarTestResult.IsSuccess ? "bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800 text-green-800 dark:text-green-200" : "bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800 text-red-800 dark:text-red-200") rounded-lg border p-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                @if (calendarTestResult.IsSuccess)
                                {
                                    <svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                }
                                else
                                {
                                    <svg class="w-5 h-5 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                }
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium mb-1">
                                    @(calendarTestResult.IsSuccess ? "Connection Successful" : "Connection Failed")
                                </h3>
                                <p class="text-sm">@calendarTestResult.Message</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<Leader> leaders = new();
    private List<CalendarInfo> availableCalendars = new();
    private bool isLoading = true;
    private bool isLoadingCalendars = false;
    private bool showSearch = false;
    private bool showEditDialog = false;
    private bool showDeleteDialog = false;
    private bool showCalendarTestDialog = false;
    private bool isSaving = false;
    private bool showManualCalendarEntry = false;
    private Leader? editingLeader;
    private Leader? deletingLeader;
    private CalendarTestResult? calendarTestResult;

    // Search and validation
    private string? searchTerm;
    private string calendarValidationState = ""; // "validating", "valid", "invalid"

    private IEnumerable<Leader> filteredLeaders
    {
        get
        {
            var filtered = leaders.AsEnumerable();

            // Text search
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                filtered = filtered.Where(l =>
                    l.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    l.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }

            return filtered.OrderBy(l => l.Title).ThenBy(l => l.Name);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadLeaders();
    }

    private async Task LoadLeaders()
    {
        isLoading = true;
        
        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null) 
        {
            isLoading = false;
            return;
        }
        
        leaders = await DbContext.Leaders
            .Where(l => l.UserId == currentUser.Id)
            .OrderBy(l => l.Title)
            .ThenBy(l => l.Name)
            .ToListAsync();
            
        isLoading = false;
    }

    private void ToggleSearch()
    {
        showSearch = !showSearch;
    }

    private async void EditLeader(Leader? leader)
    {
        if (leader == null)
        {
            // Creating new leader
            editingLeader = new Leader { IsActive = true };
        }
        else
        {
            // Editing existing leader - create a copy
            editingLeader = new Leader
            {
                Id = leader.Id,
                Name = leader.Name,
                Title = leader.Title,
                Email = leader.Email,
                Phone = leader.Phone,
                GoogleCalendarId = leader.GoogleCalendarId,
                IsActive = leader.IsActive,
                UserId = leader.UserId
            };
        }
        
        calendarValidationState = "";
        showManualCalendarEntry = false;
        showEditDialog = true;
        
        // Load available calendars
        await LoadAvailableCalendars();
    }

    private async Task SaveLeader()
    {
        if (editingLeader == null) return;

        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null) return;

        try
        {
            isSaving = true;

            if (editingLeader.Id == 0)
            {
                // New leader
                editingLeader.UserId = currentUser.Id;
                DbContext.Leaders.Add(editingLeader);
            }
            else
            {
                // Update existing
                var existing = await DbContext.Leaders.FindAsync(editingLeader.Id);
                if (existing != null && existing.UserId == currentUser.Id)
                {
                    existing.Name = editingLeader.Name;
                    existing.Title = editingLeader.Title;
                    existing.Email = editingLeader.Email;
                    existing.Phone = editingLeader.Phone;
                    existing.GoogleCalendarId = editingLeader.GoogleCalendarId;
                    existing.IsActive = editingLeader.IsActive;
                }
            }

            await DbContext.SaveChangesAsync();
            await LoadLeaders();
            
            showEditDialog = false;
            editingLeader = null;
        }
        catch (Exception ex)
        {
            // Handle error - in production, show user-friendly message
            Console.WriteLine($"Error saving leader: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void CancelEdit()
    {
        showEditDialog = false;
        editingLeader = null;
        calendarValidationState = "";
    }

    private void DeleteLeader(Leader leader)
    {
        deletingLeader = leader;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        if (deletingLeader == null) return;

        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null) return;

        try
        {
            var leader = await DbContext.Leaders
                .FirstOrDefaultAsync(l => l.Id == deletingLeader.Id && l.UserId == currentUser.Id);
                
            if (leader != null)
            {
                DbContext.Leaders.Remove(leader);
                await DbContext.SaveChangesAsync();
                await LoadLeaders();
            }
            
            showDeleteDialog = false;
            deletingLeader = null;
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error deleting leader: {ex.Message}");
        }
    }

    private void CancelDelete()
    {
        showDeleteDialog = false;
        deletingLeader = null;
    }

    private async Task ValidateCalendarId()
    {
        if (editingLeader == null || string.IsNullOrWhiteSpace(editingLeader.GoogleCalendarId))
        {
            calendarValidationState = "";
            return;
        }

        calendarValidationState = "validating";
        StateHasChanged();

        try
        {
            // Test calendar connection
            var isAuthenticated = await CalendarService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                calendarValidationState = "invalid";
                return;
            }

            // Try to get a time slot to test the calendar ID
            var tomorrow = DateTime.Today.AddDays(1);
            var testSlots = await CalendarService.GetAvailableTimeSlotsAsync(
                editingLeader.GoogleCalendarId, 
                tomorrow.AddHours(9), 
                tomorrow.AddHours(10), 
                30);
            
            calendarValidationState = "valid";
        }
        catch (Exception)
        {
            calendarValidationState = "invalid";
        }
    }

    private async Task TestCalendarConnection(Leader leader)
    {
        if (string.IsNullOrWhiteSpace(leader.GoogleCalendarId))
        {
            calendarTestResult = new CalendarTestResult
            {
                IsSuccess = false,
                Message = "No calendar ID configured for this leader."
            };
            showCalendarTestDialog = true;
            return;
        }

        try
        {
            var isAuthenticated = await CalendarService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                calendarTestResult = new CalendarTestResult
                {
                    IsSuccess = false,
                    Message = "You need to sign in with Google to test calendar connections."
                };
                showCalendarTestDialog = true;
                return;
            }

            // Test calendar access
            var tomorrow = DateTime.Today.AddDays(1);
            var testSlots = await CalendarService.GetAvailableTimeSlotsAsync(
                leader.GoogleCalendarId, 
                tomorrow.AddHours(9), 
                tomorrow.AddHours(10), 
                30);

            calendarTestResult = new CalendarTestResult
            {
                IsSuccess = true,
                Message = $"Successfully connected to {leader.Name}'s calendar. Found {testSlots.Count} time slots for tomorrow."
            };
        }
        catch (Exception ex)
        {
            calendarTestResult = new CalendarTestResult
            {
                IsSuccess = false,
                Message = $"Failed to connect to calendar: {ex.Message}"
            };
        }

        showCalendarTestDialog = true;
    }

    private async Task LoadAvailableCalendars()
    {
        try
        {
            isLoadingCalendars = true;
            StateHasChanged();
            
            var isAuthenticated = await CalendarService.IsAuthenticatedAsync();
            if (isAuthenticated)
            {
                availableCalendars = await CalendarService.GetCalendarsAsync();
            }
            else
            {
                availableCalendars.Clear();
                showManualCalendarEntry = true;
            }
        }
        catch (Exception)
        {
            availableCalendars.Clear();
            showManualCalendarEntry = true;
        }
        finally
        {
            isLoadingCalendars = false;
            StateHasChanged();
        }
    }
    
    private async Task OnCalendarSelectionChanged(ChangeEventArgs e)
    {
        if (editingLeader != null)
        {
            editingLeader.GoogleCalendarId = e.Value?.ToString() ?? "";
            await ValidateCalendarId();
        }
    }

    private async Task CopyToClipboard(string? text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }

    // Helper classes
    public class CalendarTestResult
    {
        public bool IsSuccess { get; set; }
        public string Message { get; set; } = string.Empty;
    }

    // Component for displaying leader cards
    private RenderFragment RenderLeaderCard(Leader leader, Action onEdit, Action onDelete, Func<Task> onTestCalendar) => @<div class="flex items-start justify-between">
        <div class="flex items-center space-x-3 flex-1 min-w-0">
            <div class="flex-shrink-0">
                <div class="w-12 h-12 @(leader.IsActive ? "bg-primary-100 dark:bg-primary-900" : "bg-gray-200 dark:bg-gray-700") rounded-full flex items-center justify-center">
                    <span class="text-lg font-medium @(leader.IsActive ? "text-primary-600 dark:text-primary-400" : "text-gray-600 dark:text-gray-400")">
                        @if (!string.IsNullOrEmpty(leader.Name))
                        {
                            @leader.Name.Substring(0, Math.Min(2, leader.Name.Length)).ToUpper()
                        }
                    </span>
                </div>
            </div>
            <div class="flex-1 min-w-0">
                <div class="flex items-center">
                    <h3 class="font-medium text-gray-900 dark:text-white truncate mr-2">
                        @leader.Name
                    </h3>
                    @if (!leader.IsActive)
                    {
                        <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200">
                            Inactive
                        </span>
                    }
                </div>
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-1">@leader.Title</p>
                
                <!-- Calendar Status -->
                <div class="flex items-center mt-2">
                    @if (!string.IsNullOrEmpty(leader.GoogleCalendarId))
                    {
                        <div class="flex items-center text-xs">
                            <div class="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                            <span class="text-green-600 dark:text-green-400">Calendar Connected</span>
                        </div>
                    }
                    else
                    {
                        <div class="flex items-center text-xs">
                            <div class="w-2 h-2 bg-gray-400 rounded-full mr-2"></div>
                            <span class="text-gray-500">No Calendar</span>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="flex items-center space-x-1 ml-2">
            @if (!string.IsNullOrEmpty(leader.GoogleCalendarId))
            {
                <button @onclick="onTestCalendar" class="btn-ghost p-2" title="Test Calendar">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                </button>
            }
            <button @onclick="onEdit" class="btn-ghost p-2" title="Edit">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
            </button>
            <button @onclick="onDelete" class="btn-ghost p-2 hover:text-red-600 dark:hover:text-red-400" title="Delete">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
            </button>
        </div>
    </div>;
}