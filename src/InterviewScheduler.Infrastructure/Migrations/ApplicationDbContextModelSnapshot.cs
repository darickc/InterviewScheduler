// <auto-generated />
using System;
using InterviewScheduler.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterviewScheduler.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("InterviewScheduler.Core.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GoogleEventId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("LeaderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("ContactId");

                    b.HasIndex("LeaderId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("InterviewScheduler.Core.Entities.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("MinorMessageTemplate")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 15,
                            MessageTemplate = "{ContactName}, can you meet with {LeaderName} on {Date} at {Time}?",
                            MinorMessageTemplate = "Dear Parent/Guardian of {ContactName}, your child has been scheduled to meet with {LeaderName} on {Date} at {Time}. Please ensure they are available.",
                            Name = "Generic Meeting"
                        },
                        new
                        {
                            Id = 2,
                            Duration = 10,
                            MessageTemplate = "{ContactName}, your temple recommend has expired or is about to expire. Can you meet with {LeaderName} for a temple recommend interview on {Date} at {Time}?",
                            MinorMessageTemplate = "Dear Parent/Guardian of {ContactName}, your child's temple recommend requires renewal. They have been scheduled with {LeaderName} on {Date} at {Time} for their interview.",
                            Name = "Temple Recommend Interview"
                        });
                });

            modelBuilder.Entity("InterviewScheduler.Core.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HeadOfHouseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpouseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HeadOfHouseId");

                    b.HasIndex("SpouseId")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("InterviewScheduler.Core.Entities.Leader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GoogleCalendarId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Leaders");
                });

            modelBuilder.Entity("InterviewScheduler.Core.Entities.Appointment", b =>
                {
                    b.HasOne("InterviewScheduler.Core.Entities.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterviewScheduler.Core.Entities.Contact", "Contact")
                        .WithMany("Appointments")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InterviewScheduler.Core.Entities.Leader", "Leader")
                        .WithMany("Appointments")
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentType");

                    b.Navigation("Contact");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("InterviewScheduler.Core.Entities.Contact", b =>
                {
                    b.HasOne("InterviewScheduler.Core.Entities.Contact", "HeadOfHouse")
                        .WithMany("HouseholdMembers")
                        .HasForeignKey("HeadOfHouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InterviewScheduler.Core.Entities.Contact", "Spouse")
                        .WithOne()
                        .HasForeignKey("InterviewScheduler.Core.Entities.Contact", "SpouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("HeadOfHouse");

                    b.Navigation("Spouse");
                });

            modelBuilder.Entity("InterviewScheduler.Core.Entities.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("InterviewScheduler.Core.Entities.Contact", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HouseholdMembers");
                });

            modelBuilder.Entity("InterviewScheduler.Core.Entities.Leader", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
