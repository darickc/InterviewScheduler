@page "/contacts"
@attribute [Authorize]
@using InterviewScheduler.Core.Entities
@using InterviewScheduler.Core.Interfaces
@using InterviewScheduler.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@inject ApplicationDbContext DbContext
@inject ICsvParserService CsvParser
@inject IUserService UserService
@inject IJSRuntime JSRuntime

<PageTitle>Contacts</PageTitle>

<!-- Mobile Header -->
<div class="sticky top-0 z-30 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border-b border-gray-200/80 dark:border-gray-700/80 px-4 py-3 md:hidden">
    <div class="flex items-center justify-between">
        <h1 class="text-xl font-semibold text-gray-900 dark:text-white">Contacts</h1>
        <div class="flex items-center space-x-2">
            <!-- Filter Toggle -->
            <button @onclick="ToggleFilters" class="btn-ghost p-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                </svg>
            </button>
            <!-- Import CSV Button -->
            <button @onclick="ToggleImportDialog" class="btn-ghost p-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
            </button>
        </div>
    </div>
</div>

<!-- Desktop Header -->
<div class="hidden md:block mb-8">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Contact Management</h1>
    <p class="text-gray-600 dark:text-gray-300">Manage your contacts and family relationships</p>
</div>

<!-- Search and Filters (Mobile Collapsible) -->
<div class="@(showFilters ? "block" : "hidden md:block") px-4 md:px-0 py-4 md:py-0 bg-gray-50 dark:bg-gray-900 md:bg-transparent border-b border-gray-200 dark:border-gray-700 md:border-0 mb-4">
    <!-- Search Bar -->
    <div class="mb-4">
        <div class="relative">
            <input type="text" 
                   class="form-input pl-10" 
                   placeholder="Search contacts..."
                   @bind="searchTerm" 
                   @bind:event="oninput">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </div>
        </div>
    </div>

    <!-- Filter Options -->
    <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
        <select class="form-select" @bind="familyFilter">
            <option value="">All Families</option>
            <option value="head">Heads of House</option>
            <option value="spouse">Spouses</option>
            <option value="dependent">Dependents</option>
        </select>

        <select class="form-select" @bind="ageFilter">
            <option value="">All Ages</option>
            <option value="minor">Minors (â‰¤17)</option>
            <option value="adult">Adults (18+)</option>
            <option value="senior">Seniors (65+)</option>
        </select>

        <select class="form-select" @bind="genderFilter">
            <option value="">All Genders</option>
            <option value="Male">Male</option>
            <option value="Female">Female</option>
        </select>

        <button class="btn-secondary" @onclick="ClearFilters">
            Clear Filters
        </button>
    </div>

    <!-- View Options -->
    <div class="flex items-center justify-between mt-4">
        <label class="flex items-center">
            <input type="checkbox" class="rounded border-gray-300 text-primary-600 focus:ring-primary-500" @bind="groupByFamily">
            <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">Group by Family</span>
        </label>
        <span class="text-sm text-gray-600 dark:text-gray-400">
            @filteredContacts.Count() of @contacts.Count contacts
        </span>
    </div>
</div>

<!-- Contact List -->
<div class="px-4 md:px-0 pb-24 md:pb-0">
    @if (isLoading)
    {
        <!-- Loading Skeleton -->
        <div class="space-y-4">
            @for (int i = 0; i < 5; i++)
            {
                <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4 animate-pulse">
                    <div class="flex items-center space-x-4">
                        <div class="w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded-full"></div>
                        <div class="flex-1">
                            <div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
                            <div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!filteredContacts.Any())
    {
        <!-- Empty State -->
        <div class="text-center py-12">
            <svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
            </svg>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No contacts found</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">
                @if (string.IsNullOrEmpty(searchTerm) && string.IsNullOrEmpty(familyFilter) && string.IsNullOrEmpty(ageFilter) && string.IsNullOrEmpty(genderFilter))
                {
                    <text>Import contacts from a CSV file to get started.</text>
                }
                else
                {
                    <text>Try adjusting your filters or search term.</text>
                }
            </p>
            @if (!contacts.Any())
            {
                <button class="btn-primary" @onclick="ToggleImportDialog">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                    </svg>
                    Import Contacts
                </button>
            }
        </div>
    }
    else
    {
        @if (groupByFamily)
        {
            <!-- Family Grouped View -->
            <div class="space-y-4">
                @foreach (var family in GetFamilyGroups())
                {
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
                        <button @onclick="() => ToggleFamilyExpansion(family.Key)" 
                                class="w-full px-4 py-3 flex items-center justify-between hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                            <div class="flex items-center space-x-3">
                                <div class="w-10 h-10 bg-primary-100 dark:bg-primary-900 rounded-full flex items-center justify-center">
                                    <svg class="w-6 h-6 text-primary-600 dark:text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                    </svg>
                                </div>
                                <div class="text-left">
                                    <h3 class="font-medium text-gray-900 dark:text-white">@family.Key's Household</h3>
                                    <p class="text-sm text-gray-600 dark:text-gray-400">@family.Value.Count members</p>
                                </div>
                            </div>
                            <svg class="w-5 h-5 text-gray-400 transition-transform @(expandedFamilies.Contains(family.Key) ? "rotate-180" : "")" 
                                 fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                        
                        @if (expandedFamilies.Contains(family.Key))
                        {
                            <div class="border-t border-gray-200 dark:border-gray-700">
                                @foreach (var member in family.Value.OrderBy(m => GetFamilyRoleOrder(m)))
                                {
                                    <div class="px-4 py-3 border-b border-gray-100 dark:border-gray-700 last:border-0">
                                        @RenderContactCard(member, () => EditContact(member), () => DeleteContact(member))
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Individual Contact View -->
            <div class="space-y-3">
                @foreach (var contact in filteredContacts)
                {
                    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
                        @RenderContactCard(contact, () => EditContact(contact), () => DeleteContact(contact))
                    </div>
                }
            </div>
        }
    }
</div>

<!-- Floating Action Button -->
<button @onclick="() => EditContact(null)" 
        class="fixed bottom-20 right-4 md:bottom-8 md:right-8 w-14 h-14 bg-primary-600 hover:bg-primary-700 text-white rounded-full shadow-lg hover:shadow-xl transition-all duration-200 flex items-center justify-center z-20">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
    </svg>
</button>

<!-- Import CSV Modal -->
@if (showImportDialog)
{
    <div class="fixed inset-0 bg-gray-900/50 z-40 flex items-end md:items-center justify-center">
        <div class="bg-white dark:bg-gray-800 w-full md:max-w-md md:mx-4 rounded-t-xl md:rounded-lg shadow-xl transform transition-all duration-300 @(showImportDialog ? "translate-y-0" : "translate-y-full")">
            <div class="flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Import Contacts</h2>
                <button @onclick="ToggleImportDialog" class="btn-ghost p-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <div class="p-6">
                <div class="mb-4">
                    <label for="csvFile" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                        Select CSV File
                    </label>
                    <div class="relative">
                        <InputFile id="csvFile" OnChange="@LoadFiles" accept=".csv" class="hidden" />
                        <label for="csvFile" 
                               class="touch-target flex items-center justify-center w-full px-4 py-3 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg hover:border-gray-400 dark:hover:border-gray-500 cursor-pointer transition-colors">
                            <svg class="w-8 h-8 text-gray-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                            </svg>
                            <span class="text-gray-600 dark:text-gray-400">
                                Click to browse or drag and drop
                            </span>
                        </label>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(importMessage))
                {
                    <div class="@(importSuccess ? "bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800 text-green-800 dark:text-green-200" : "bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800 text-red-800 dark:text-red-200") rounded-lg border p-4 mb-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                @if (importSuccess)
                                {
                                    <svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                }
                                else
                                {
                                    <svg class="w-5 h-5 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                }
                            </div>
                            <div class="ml-3">
                                <p class="text-sm">@importMessage</p>
                            </div>
                        </div>
                    </div>
                }

                <div class="text-sm text-gray-600 dark:text-gray-400">
                    <p class="mb-2">CSV file should contain the following columns:</p>
                    <ul class="list-disc list-inside space-y-1 text-xs">
                        <li>First Name, Last Name (required)</li>
                        <li>Middle Name, Phone Number (optional)</li>
                        <li>Gender (Male/Female)</li>
                        <li>Birth Date (MM/DD/YYYY)</li>
                        <li>Head of House, Spouse (for relationships)</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Contact Modal -->
@if (showEditDialog)
{
    <div class="fixed inset-0 bg-gray-900/50 z-40 flex items-end md:items-center justify-center">
        <div class="bg-white dark:bg-gray-800 w-full md:max-w-lg md:mx-4 max-h-[90vh] md:max-h-[80vh] rounded-t-xl md:rounded-lg shadow-xl transform transition-all duration-300 @(showEditDialog ? "translate-y-0" : "translate-y-full") flex flex-col">
            <div class="flex items-center justify-between px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h2 class="text-lg font-semibold text-gray-900 dark:text-white">
                    @(editingContact?.Id > 0 ? "Edit Contact" : "Add Contact")
                </h2>
                <button @onclick="CancelEdit" class="btn-ghost p-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            
            <div class="flex-1 overflow-y-auto p-6">
                @if (editingContact != null)
                {
                    <form @onsubmit="SaveContact" @onsubmit:preventDefault="true">
                        <div class="space-y-4">
                            <!-- Name Fields -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                        First Name <span class="text-red-500">*</span>
                                    </label>
                                    <input type="text" class="form-input" @bind="editingContact.FirstName" required>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                        Last Name <span class="text-red-500">*</span>
                                    </label>
                                    <input type="text" class="form-input" @bind="editingContact.LastName" required>
                                </div>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    Middle Name
                                </label>
                                <input type="text" class="form-input" @bind="editingContact.MiddleName">
                            </div>

                            <!-- Contact Info -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    Phone Number
                                </label>
                                <input type="tel" class="form-input" @bind="editingContact.PhoneNumber" placeholder="(555) 123-4567">
                            </div>

                            <!-- Personal Info -->
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                        Gender <span class="text-red-500">*</span>
                                    </label>
                                    <select class="form-select" @bind="editingContact.Gender" required>
                                        <option value="">Select Gender</option>
                                        <option value="Male">Male</option>
                                        <option value="Female">Female</option>
                                    </select>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                        Birth Date <span class="text-red-500">*</span>
                                    </label>
                                    <input type="date" class="form-input" @bind="editingContact.BirthDate" required>
                                </div>
                            </div>

                            <!-- Family Relationships -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    Head of House
                                </label>
                                <select class="form-select" @bind="editingContact.HeadOfHouseId">
                                    <option value="">None (This person is head of house)</option>
                                    @foreach (var head in contacts.Where(c => c.Id != editingContact.Id && c.HeadOfHouseId == null))
                                    {
                                        <option value="@head.Id">@head.FullName</option>
                                    }
                                </select>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                                    Spouse
                                </label>
                                <select class="form-select" @bind="editingContact.SpouseId">
                                    <option value="">None</option>
                                    @foreach (var spouse in contacts.Where(c => c.Id != editingContact.Id))
                                    {
                                        <option value="@spouse.Id">@spouse.FullName</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="flex gap-3 mt-6">
                            <button type="submit" class="btn-primary flex-1">
                                Save Contact
                            </button>
                            <button type="button" @onclick="CancelEdit" class="btn-secondary flex-1">
                                Cancel
                            </button>
                        </div>
                    </form>
                }
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteDialog && deletingContact != null)
{
    <div class="fixed inset-0 bg-gray-900/50 z-50 flex items-end md:items-center justify-center">
        <div class="bg-white dark:bg-gray-800 w-full md:max-w-sm md:mx-4 rounded-t-xl md:rounded-lg shadow-xl transform transition-all duration-300">
            <div class="p-6 text-center">
                <svg class="w-16 h-16 text-red-600 dark:text-red-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Delete Contact?</h3>
                <p class="text-gray-600 dark:text-gray-400 mb-6">
                    Are you sure you want to delete <strong>@deletingContact.FullName</strong>? This action cannot be undone.
                </p>
                <div class="flex gap-3">
                    <button @onclick="ConfirmDelete" class="btn-danger flex-1">
                        Delete
                    </button>
                    <button @onclick="CancelDelete" class="btn-secondary flex-1">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Contact> contacts = new();
    private HashSet<string> expandedFamilies = new();
    private bool isLoading = true;
    private bool showFilters = false;
    private bool showImportDialog = false;
    private bool showEditDialog = false;
    private bool showDeleteDialog = false;
    private Contact? editingContact;
    private Contact? deletingContact;

    // Filter properties
    private string? searchTerm;
    private string? genderFilter;
    private string? ageFilter;
    private string? familyFilter;
    private bool groupByFamily = false;

    // Import properties
    private string? importMessage;
    private bool importSuccess;

    private IEnumerable<Contact> filteredContacts
    {
        get
        {
            var filtered = contacts.AsEnumerable();

            // Text search
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                filtered = filtered.Where(c =>
                    c.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (!string.IsNullOrEmpty(c.MiddleName) && c.MiddleName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    c.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (c.PhoneNumber != null && c.PhoneNumber.Contains(searchTerm)));
            }

            // Gender filter
            if (!string.IsNullOrWhiteSpace(genderFilter))
            {
                filtered = filtered.Where(c => c.Gender.ToString() == genderFilter);
            }

            // Age filter
            if (!string.IsNullOrWhiteSpace(ageFilter))
            {
                filtered = ageFilter switch
                {
                    "minor" => filtered.Where(c => c.IsMinor),
                    "adult" => filtered.Where(c => !c.IsMinor && c.Age < 65),
                    "senior" => filtered.Where(c => c.Age >= 65),
                    _ => filtered
                };
            }

            // Family filter
            if (!string.IsNullOrWhiteSpace(familyFilter))
            {
                filtered = familyFilter switch
                {
                    "head" => filtered.Where(c => c.HeadOfHouseId == null),
                    "spouse" => filtered.Where(c => c.SpouseId != null),
                    "dependent" => filtered.Where(c => c.HeadOfHouseId != null),
                    _ => filtered
                };
            }

            return filtered.OrderBy(c => c.LastName).ThenBy(c => c.FirstName);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadContacts();
    }

    private async Task LoadContacts()
    {
        isLoading = true;
        
        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null) 
        {
            isLoading = false;
            return;
        }
        
        contacts = await DbContext.Contacts
            .Include(c => c.HeadOfHouse)
            .Include(c => c.Spouse)
            .Where(c => c.UserId == currentUser.Id)
            .OrderBy(c => c.LastName)
            .ThenBy(c => c.FirstName)
            .ToListAsync();
            
        isLoading = false;
    }

    private void ToggleFilters()
    {
        showFilters = !showFilters;
    }

    private void ToggleImportDialog()
    {
        showImportDialog = !showImportDialog;
        importMessage = null;
    }

    private void ToggleFamilyExpansion(string familyKey)
    {
        if (expandedFamilies.Contains(familyKey))
        {
            expandedFamilies.Remove(familyKey);
        }
        else
        {
            expandedFamilies.Add(familyKey);
        }
    }

    private void ClearFilters()
    {
        searchTerm = null;
        genderFilter = null;
        ageFilter = null;
        familyFilter = null;
    }

    private Dictionary<string, List<Contact>> GetFamilyGroups()
    {
        var families = new Dictionary<string, List<Contact>>();
        
        foreach (var contact in filteredContacts)
        {
            var familyName = GetFamilyName(contact);
            if (!families.ContainsKey(familyName))
            {
                families[familyName] = new List<Contact>();
            }
            families[familyName].Add(contact);
        }
        
        return families.OrderBy(f => f.Key).ToDictionary(f => f.Key, f => f.Value);
    }

    private string GetFamilyName(Contact contact)
    {
        if (contact.HeadOfHouseId == null)
        {
            return contact.FullName;
        }
        
        return contact.HeadOfHouse?.FullName ?? contact.FullName;
    }

    private string GetFamilyRole(Contact contact)
    {
        if (contact.HeadOfHouseId == null)
        {
            return "Head of House";
        }
        else if (contact.SpouseId != null)
        {
            return "Spouse";
        }
        else if (contact.IsMinor)
        {
            return "Child";
        }
        else
        {
            return "Dependent";
        }
    }

    private int GetFamilyRoleOrder(Contact contact)
    {
        return GetFamilyRole(contact) switch
        {
            "Head of House" => 1,
            "Spouse" => 2,
            "Child" => 3,
            "Dependent" => 4,
            _ => 5
        };
    }

    private void EditContact(Contact? contact)
    {
        if (contact == null)
        {
            // Creating new contact
            editingContact = new Contact
            {
                BirthDate = DateTime.Today.AddYears(-30)
            };
        }
        else
        {
            // Editing existing contact - create a copy
            editingContact = new Contact
            {
                Id = contact.Id,
                FirstName = contact.FirstName,
                MiddleName = contact.MiddleName,
                LastName = contact.LastName,
                PhoneNumber = contact.PhoneNumber,
                Gender = contact.Gender,
                BirthDate = contact.BirthDate,
                HeadOfHouseId = contact.HeadOfHouseId,
                SpouseId = contact.SpouseId,
                UserId = contact.UserId
            };
        }
        
        showEditDialog = true;
    }

    private async Task SaveContact()
    {
        if (editingContact == null) return;

        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null) return;

        try
        {
            if (editingContact.Id == 0)
            {
                // New contact
                editingContact.UserId = currentUser.Id;
                DbContext.Contacts.Add(editingContact);
            }
            else
            {
                // Update existing
                var existing = await DbContext.Contacts.FindAsync(editingContact.Id);
                if (existing != null && existing.UserId == currentUser.Id)
                {
                    existing.FirstName = editingContact.FirstName;
                    existing.MiddleName = editingContact.MiddleName;
                    existing.LastName = editingContact.LastName;
                    existing.PhoneNumber = editingContact.PhoneNumber;
                    existing.Gender = editingContact.Gender;
                    existing.BirthDate = editingContact.BirthDate;
                    existing.HeadOfHouseId = editingContact.HeadOfHouseId;
                    existing.SpouseId = editingContact.SpouseId;
                }
            }

            await DbContext.SaveChangesAsync();
            await LoadContacts();
            
            showEditDialog = false;
            editingContact = null;
        }
        catch (Exception ex)
        {
            // Handle error - in production, show user-friendly message
            Console.WriteLine($"Error saving contact: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        showEditDialog = false;
        editingContact = null;
    }

    private void DeleteContact(Contact contact)
    {
        deletingContact = contact;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        if (deletingContact == null) return;

        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null) return;

        try
        {
            var contact = await DbContext.Contacts
                .FirstOrDefaultAsync(c => c.Id == deletingContact.Id && c.UserId == currentUser.Id);
                
            if (contact != null)
            {
                // First clear any relationships
                var dependents = await DbContext.Contacts
                    .Where(c => c.HeadOfHouseId == contact.Id || c.SpouseId == contact.Id)
                    .ToListAsync();
                    
                foreach (var dependent in dependents)
                {
                    if (dependent.HeadOfHouseId == contact.Id)
                        dependent.HeadOfHouseId = null;
                    if (dependent.SpouseId == contact.Id)
                        dependent.SpouseId = null;
                }
                
                DbContext.Contacts.Remove(contact);
                await DbContext.SaveChangesAsync();
                await LoadContacts();
            }
            
            showDeleteDialog = false;
            deletingContact = null;
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error deleting contact: {ex.Message}");
        }
    }

    private void CancelDelete()
    {
        showDeleteDialog = false;
        deletingContact = null;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        importMessage = null;
        
        try
        {
            var file = e.File;
            if (file.ContentType != "text/csv" && !file.Name.EndsWith(".csv"))
            {
                importMessage = "Please select a CSV file.";
                importSuccess = false;
                return;
            }

            // Read file into memory
            using var fileStream = file.OpenReadStream();
            using var memoryStream = new MemoryStream();
            await fileStream.CopyToAsync(memoryStream);
            var csvBytes = memoryStream.ToArray();

            // First pass: Parse contacts without relationships
            using var parseStream = new MemoryStream(csvBytes);
            var importedContacts = await CsvParser.ParseContactsCsvAsync(parseStream);

            if (importedContacts.Any())
            {
                var currentUser = await UserService.GetCurrentUserAsync();
                if (currentUser == null)
                {
                    importMessage = "User not found. Please sign in again.";
                    importSuccess = false;
                    return;
                }

                // Clear existing contacts
                var existingContacts = await DbContext.Contacts
                    .Where(c => c.UserId == currentUser.Id)
                    .ToListAsync();
                
                // Break circular dependencies
                foreach (var contact in existingContacts)
                {
                    contact.HeadOfHouseId = null;
                    contact.SpouseId = null;
                }
                await DbContext.SaveChangesAsync();
                
                // Delete all contacts
                DbContext.Contacts.RemoveRange(existingContacts);

                // Add new contacts
                foreach (var contact in importedContacts)
                {
                    contact.UserId = currentUser.Id;
                }

                await DbContext.Contacts.AddRangeAsync(importedContacts);
                await DbContext.SaveChangesAsync();

                // Second pass: Link relationships
                using var linkStream = new MemoryStream(csvBytes);
                await CsvParser.LinkRelationshipsAsync(linkStream, importedContacts);
                await DbContext.SaveChangesAsync();
                
                await LoadContacts();

                importMessage = $"Successfully imported {importedContacts.Count} contacts.";
                importSuccess = true;
                
                // Close dialog on success
                await Task.Delay(1500);
                showImportDialog = false;
            }
            else
            {
                importMessage = "No contacts found in the CSV file.";
                importSuccess = false;
            }
        }
        catch (Exception ex)
        {
            importMessage = $"Error importing contacts: {ex.Message}";
            importSuccess = false;
        }
    }

    // Component for displaying contact cards
    private RenderFragment RenderContactCard(Contact contact, Action onEdit, Action onDelete) => @<div class="flex items-start justify-between">
        <div class="flex items-center space-x-3 flex-1 min-w-0">
            <div class="flex-shrink-0">
                <div class="w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded-full flex items-center justify-center">
                    <span class="text-lg font-medium text-gray-600 dark:text-gray-400">
                        @contact.FirstName.Substring(0, 1)@contact.LastName.Substring(0, 1)
                    </span>
                </div>
            </div>
            <div class="flex-1 min-w-0">
                <h3 class="font-medium text-gray-900 dark:text-white truncate">
                    @contact.DisplayName
                    @if (contact.IsMinor)
                    {
                        <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                            Minor
                        </span>
                    }
                </h3>
                <div class="flex flex-col sm:flex-row sm:items-center sm:space-x-4 text-sm text-gray-600 dark:text-gray-400">
                    @if (!string.IsNullOrEmpty(contact.PhoneNumber))
                    {
                        <button @onclick="() => CopyToClipboard(contact.PhoneNumber)" 
                                class="flex items-center hover:text-primary-600 dark:hover:text-primary-400 transition-colors">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                            </svg>
                            @contact.PhoneNumber
                        </button>
                    }
                    <span class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                        Age @contact.Age
                    </span>
                </div>
                @if (!string.IsNullOrEmpty(@GetFamilyRole(contact)))
                {
                    <p class="text-xs text-gray-500 dark:text-gray-500 mt-1">
                        @GetFamilyRole(contact)
                        @if (contact.HeadOfHouse != null)
                        {
                            <text> in @contact.HeadOfHouse.DisplayName's household</text>
                        }
                    </p>
                }
            </div>
        </div>
        <div class="flex items-center space-x-1 ml-2">
            <button @onclick="onEdit" class="btn-ghost p-2" title="Edit">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
            </button>
            <button @onclick="onDelete" class="btn-ghost p-2 hover:text-red-600 dark:hover:text-red-400" title="Delete">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
            </button>
        </div>
    </div>;

    private async Task CopyToClipboard(string? text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
    }
}