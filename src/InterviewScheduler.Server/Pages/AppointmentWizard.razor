@page "/appointments/new"
@attribute [Authorize]
@using InterviewScheduler.Core.Entities
@using InterviewScheduler.Core.Enums
@using InterviewScheduler.Core.Interfaces
@using InterviewScheduler.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject ICalendarService CalendarService
@inject ISmsService SmsService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<AppointmentWizard> Logger
@inject IUserService UserService

<PageTitle>Schedule Appointment</PageTitle>

<!-- Mobile Header -->
<div class="sticky top-0 z-30 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border-b border-gray-200/80 dark:border-gray-700/80 px-4 py-3 md:hidden">
    <div class="flex items-center justify-between">
        <div class="flex items-center space-x-3">
            <button @onclick="GoBack" class="touch-target p-2 -ml-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
            </button>
            <h1 class="text-lg font-semibold text-gray-900 dark:text-white">New Appointment</h1>
        </div>
        <div class="text-sm font-medium text-primary-600 dark:text-primary-400">
            Step @currentStep of 4
        </div>
    </div>
</div>

<!-- Desktop Header -->
<div class="hidden md:block mb-8">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Schedule New Appointment</h1>
            <p class="text-gray-600 dark:text-gray-300">Create appointments with automatic time distribution</p>
        </div>
        <button @onclick="GoBack" class="btn-secondary">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Back to Appointments
        </button>
    </div>
</div>

<!-- Mobile Step Indicator -->
<div class="md:hidden px-4 py-4">
    <div class="flex items-center justify-center space-x-2 mb-4">
        @for (int i = 1; i <= 4; i++)
        {
            <div class="flex items-center">
                <div class="@(GetMobileStepClass(i)) w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold">
                    @if (i < currentStep)
                    {
                        <!-- Completed step -->
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                        </svg>
                    }
                    else
                    {
                        @i
                    }
                </div>
                @if (i < 4)
                {
                    <div class="@(i < currentStep ? "bg-primary-600" : "bg-gray-300 dark:bg-gray-600") w-8 h-0.5 mx-2"></div>
                }
            </div>
        }
    </div>
    <div class="text-center">
        <p class="text-sm font-medium text-gray-900 dark:text-white">@GetStepTitle(currentStep)</p>
        <p class="text-xs text-gray-600 dark:text-gray-400 mt-1">@GetStepDescription(currentStep)</p>
    </div>
</div>

<!-- Desktop Progress Bar -->
<div class="hidden md:block mb-8">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center justify-between mb-4">
            @for (int i = 1; i <= 4; i++)
            {
                <div class="flex flex-col items-center relative @(i < 4 ? "flex-1" : "")">
                    <div class="@(GetDesktopStepClass(i)) w-10 h-10 rounded-full flex items-center justify-center text-sm font-semibold mb-2">
                        @if (i < currentStep)
                        {
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                            </svg>
                        }
                        else
                        {
                            @i
                        }
                    </div>
                    <span class="text-sm font-medium text-gray-900 dark:text-white text-center">@GetStepTitle(i)</span>
                    @if (i < 4)
                    {
                        <div class="absolute top-5 left-full w-full h-0.5 @(i < currentStep ? "bg-primary-600" : "bg-gray-300 dark:bg-gray-600")"></div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Step Content -->
<div class="@(currentStep == 1 ? "block" : "hidden")">
    <!-- Step 1: Contact Selection -->
    <div class="mobile-card md:feature-card md:mx-0">
        <div class="mb-6">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Select Contacts</h2>
            <p class="text-gray-600 dark:text-gray-400">Choose the people you'd like to schedule appointments with</p>
        </div>

        <!-- Search and Filters -->
        <div class="space-y-4 mb-6">
            <!-- Search Bar -->
            <div class="relative">
                <input type="text" 
                       class="form-input pl-10" 
                       placeholder="Search contacts..."
                       @bind="contactSearchTerm" 
                       @bind:event="oninput">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
            </div>

            <!-- Filter Row -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <select class="form-select" @bind="contactGenderFilter">
                    <option value="">All Genders</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                </select>
                <select class="form-select" @bind="contactAgeFilter">
                    <option value="">All Ages</option>
                    <option value="minor">Minors (≤17)</option>
                    <option value="adult">Adults (18+)</option>
                </select>
            </div>
        </div>

        <!-- Contact Lists Container -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Available Contacts -->
            <div>
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white">Available Contacts</h3>
                    <span class="text-sm text-gray-600 dark:text-gray-400">@filteredContacts.Count() available</span>
                </div>
                
                <div class="space-y-2 max-h-80 overflow-y-auto scrollbar-hide">
                    @if (filteredContacts.Any())
                    {
                        @foreach (var contact in filteredContacts)
                        {
                            <div class="bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200">
                                <div class="flex items-start justify-between">
                                    <div class="flex-1 min-w-0">
                                        <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate">@contact.FullName</h4>
                                        <div class="mt-1 flex items-center space-x-4 text-xs text-gray-600 dark:text-gray-400">
                                            <span>@contact.PhoneNumber</span>
                                            <span>Age: @contact.Age</span>
                                            @if (contact.IsMinor)
                                            {
                                                <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300">
                                                    Minor
                                                </span>
                                            }
                                        </div>
                                        @if (contact.HeadOfHouse != null)
                                        {
                                            <p class="text-xs text-gray-500 dark:text-gray-500 mt-1">Head of House: @contact.HeadOfHouse.FullName</p>
                                        }
                                    </div>
                                    <button class="btn-primary ml-4 px-4 py-2 text-sm" @onclick="() => SelectContact(contact)">
                                        Select
                                    </button>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-8 text-gray-500 dark:text-gray-400">
                            <svg class="w-12 h-12 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                            </svg>
                            <p>No contacts found matching your search</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Selected Contacts -->
            <div>
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white">Selected Contacts</h3>
                    <span class="text-sm text-gray-600 dark:text-gray-400">@selectedContacts.Count selected</span>
                </div>
                
                @if (selectedContacts.Any())
                {
                    <div class="space-y-2 max-h-80 overflow-y-auto scrollbar-hide">
                        @foreach (var contact in selectedContacts)
                        {
                            <div class="bg-primary-50 dark:bg-primary-900/20 border border-primary-200 dark:border-primary-800 rounded-lg p-4">
                                <div class="flex items-start justify-between">
                                    <div class="flex-1 min-w-0">
                                        <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate">@contact.FullName</h4>
                                        <p class="text-xs text-gray-600 dark:text-gray-400 mt-1">@contact.PhoneNumber</p>
                                        @if (contact.IsMinor)
                                        {
                                            <div class="mt-2">
                                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300">
                                                    Minor - Parent will be notified
                                                </span>
                                            </div>
                                        }
                                    </div>
                                    <button class="btn-ghost text-red-600 dark:text-red-400 ml-4 px-3 py-1 text-sm" @onclick="() => RemoveContact(contact)">
                                        Remove
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center">
                        <svg class="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                        <p class="text-gray-500 dark:text-gray-400">No contacts selected</p>
                        <p class="text-sm text-gray-400 dark:text-gray-500 mt-1">Choose contacts from the list above</p>
                    </div>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="flex justify-end mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
            <button class="btn-primary w-full sm:w-auto" @onclick="NextStep" disabled="@(!selectedContacts.Any())">
                Next: Choose Leaders
                <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </button>
        </div>
    </div>
</div>

<div class="@(currentStep == 2 ? "block" : "hidden")">
    <!-- Step 2: Leader Selection -->
    <div class="mobile-card md:feature-card md:mx-0">
        <div class="mb-6">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Choose Leaders</h2>
            <p class="text-gray-600 dark:text-gray-400">Select one or more leaders for scheduling appointments. The system will automatically distribute contacts across available time slots.</p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Available Leaders -->
            <div class="lg:col-span-2">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Available Leaders</h3>
                
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    @foreach (var leader in activeLeaders)
                    {
                        <div class="@(selectedLeaders.Contains(leader) ? "ring-2 ring-primary-500 bg-primary-50 dark:bg-primary-900/20" : "hover:shadow-md") bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4 cursor-pointer transition-all duration-200"
                             @onclick="() => ToggleLeader(leader)">
                            <div class="flex items-start justify-between">
                                <div class="flex-1 min-w-0">
                                    <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate">@leader.Name</h4>
                                    <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">@leader.Title</p>
                                    
                                    <div class="mt-3 flex items-center">
                                        @if (!string.IsNullOrEmpty(leader.GoogleCalendarId))
                                        {
                                            <div class="flex items-center text-green-600 dark:text-green-400">
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                                </svg>
                                                <span class="text-xs font-medium">Calendar Available</span>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="flex items-center text-amber-600 dark:text-amber-400">
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                </svg>
                                                <span class="text-xs font-medium">No Calendar</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                                
                                <div class="ml-4">
                                    @if (selectedLeaders.Contains(leader))
                                    {
                                        <div class="w-6 h-6 bg-primary-600 rounded-full flex items-center justify-center">
                                            <svg class="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                            </svg>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="w-6 h-6 border-2 border-gray-300 dark:border-gray-600 rounded-full"></div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Selected Leaders Summary -->
            <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Selected Leaders (@selectedLeaders.Count)</h3>
                
                @if (selectedLeaders.Any())
                {
                    <div class="space-y-3">
                        @foreach (var leader in selectedLeaders)
                        {
                            <div class="bg-primary-50 dark:bg-primary-900/20 border border-primary-200 dark:border-primary-800 rounded-lg p-3">
                                <div class="flex items-center justify-between">
                                    <div class="flex-1 min-w-0">
                                        <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate">@leader.Name</h4>
                                        <p class="text-xs text-gray-600 dark:text-gray-400">@leader.Title</p>
                                    </div>
                                    <button class="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 p-1" @onclick="() => ToggleLeader(leader)">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center">
                        <svg class="w-8 h-8 mx-auto mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                        <p class="text-sm text-gray-500 dark:text-gray-400">No leaders selected</p>
                    </div>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="flex flex-col sm:flex-row justify-between items-stretch sm:items-center gap-3 mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
            <button class="btn-secondary order-2 sm:order-1" @onclick="PreviousStep">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Previous
            </button>
            <button class="btn-primary order-1 sm:order-2" @onclick="NextStep" disabled="@(!selectedLeaders.Any())">
                Next: Appointment Details
                <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </button>
        </div>
    </div>
</div>

<div class="@(currentStep == 3 ? "block" : "hidden")">
    <!-- Step 3: Appointment Details -->
    <div class="mobile-card md:feature-card md:mx-0">
        <div class="mb-6">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Appointment Details</h2>
            <p class="text-gray-600 dark:text-gray-400">Configure the appointment type, date, and time range</p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Appointment Configuration -->
            <div class="space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-900 dark:text-white mb-2">
                        Appointment Type <span class="text-red-500">*</span>
                    </label>
                    <select class="form-select" @bind="selectedAppointmentTypeId">
                        <option value="">Select appointment type</option>
                        @foreach (var type in appointmentTypes)
                        {
                            <option value="@type.Id">@type.Name (@type.Duration minutes)</option>
                        }
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-900 dark:text-white mb-2">
                        Appointment Date <span class="text-red-500">*</span>
                    </label>
                    <input type="date" 
                           class="form-input" 
                           @bind="appointmentDate" 
                           min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    <p class="text-xs text-gray-600 dark:text-gray-400 mt-1">Select the date for the appointment</p>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-900 dark:text-white mb-2">
                        Time Range <span class="text-red-500">*</span>
                    </label>
                    <div class="grid grid-cols-2 gap-3">
                        <div>
                            <input type="time" class="form-input" @bind="startTime" />
                            <p class="text-xs text-gray-600 dark:text-gray-400 mt-1">Start Time</p>
                        </div>
                        <div>
                            <input type="time" class="form-input" @bind="endTime" />
                            <p class="text-xs text-gray-600 dark:text-gray-400 mt-1">End Time</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Message Preview -->
            <div>
                @if (selectedAppointmentType != null)
                {
                    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                        <h3 class="text-sm font-semibold text-blue-900 dark:text-blue-100 mb-3">Message Templates</h3>
                        
                        <div class="space-y-4">
                            <div>
                                <h4 class="text-xs font-medium text-blue-800 dark:text-blue-200 mb-2">For Adults:</h4>
                                <div class="bg-white dark:bg-gray-800 rounded p-3 text-sm text-gray-700 dark:text-gray-300 border">
                                    @selectedAppointmentType.MessageTemplate
                                </div>
                            </div>
                            
                            <div>
                                <h4 class="text-xs font-medium text-blue-800 dark:text-blue-200 mb-2">For Minors/Parents:</h4>
                                <div class="bg-white dark:bg-gray-800 rounded p-3 text-sm text-gray-700 dark:text-gray-300 border">
                                    @selectedAppointmentType.MinorMessageTemplate
                                </div>
                            </div>
                        </div>
                        
                        <div class="mt-4 p-3 bg-blue-100 dark:bg-blue-800/30 rounded text-xs text-blue-800 dark:text-blue-200">
                            <div class="flex items-center">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span class="font-medium">Duration: @selectedAppointmentType.Duration minutes</span>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="bg-gray-50 dark:bg-gray-800 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center">
                        <svg class="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                        <p class="text-gray-500 dark:text-gray-400">Select an appointment type to see message templates</p>
                    </div>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="flex flex-col sm:flex-row justify-between items-stretch sm:items-center gap-3 mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
            <button class="btn-secondary order-2 sm:order-1" @onclick="PreviousStep">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Previous
            </button>
            <button class="btn-primary order-1 sm:order-2" @onclick="NextStep" disabled="@(selectedAppointmentType == null || appointmentDate == default || startTime == default || endTime == default)">
                Next: Review & Send
                <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </button>
        </div>
    </div>
</div>

<div class="@(currentStep == 4 ? "block" : "hidden")">
    <!-- Step 4: Review & Send -->
    <div class="mobile-card md:feature-card md:mx-0">
        <div class="mb-6">
            <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">Review & Send Notifications</h2>
            <p class="text-gray-600 dark:text-gray-400">Review your appointment details before creating</p>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Appointment Summary -->
            <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Appointment Summary</h3>
                
                <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 space-y-3">
                    <div class="flex justify-between py-2 border-b border-gray-200 dark:border-gray-700">
                        <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Leaders:</span>
                        <span class="text-sm text-gray-900 dark:text-white text-right">
                            @string.Join(", ", selectedLeaders.Select(l => $"{l.Name} ({l.Title})"))
                        </span>
                    </div>
                    
                    <div class="flex justify-between py-2 border-b border-gray-200 dark:border-gray-700">
                        <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Type:</span>
                        <span class="text-sm text-gray-900 dark:text-white">@selectedAppointmentType?.Name</span>
                    </div>
                    
                    <div class="flex justify-between py-2 border-b border-gray-200 dark:border-gray-700">
                        <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Date:</span>
                        <span class="text-sm text-gray-900 dark:text-white">@appointmentDate.ToString("dddd, MMMM dd, yyyy")</span>
                    </div>
                    
                    <div class="flex justify-between py-2 border-b border-gray-200 dark:border-gray-700">
                        <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Time Range:</span>
                        <span class="text-sm text-gray-900 dark:text-white">@startTime.ToString("h:mm tt") - @endTime.ToString("h:mm tt")</span>
                    </div>
                    
                    <div class="flex justify-between py-2 border-b border-gray-200 dark:border-gray-700">
                        <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Duration:</span>
                        <span class="text-sm text-gray-900 dark:text-white">@selectedAppointmentType?.Duration minutes</span>
                    </div>
                    
                    <div class="flex justify-between py-2">
                        <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Contacts:</span>
                        <span class="text-sm text-gray-900 dark:text-white">@selectedContacts.Count contact(s)</span>
                    </div>
                </div>
            </div>

            <!-- SMS Messages Preview -->
            <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">SMS Messages Preview</h3>
                
                @if (previewMessages.Any())
                {
                    <div class="space-y-3 max-h-80 overflow-y-auto scrollbar-hide">
                        @foreach (var message in previewMessages)
                        {
                            <div class="@(message.IsMinorNotification ? "bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800" : "bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800") border rounded-lg p-4">
                                <div class="flex items-start justify-between mb-2">
                                    <div>
                                        <h4 class="text-sm font-medium text-gray-900 dark:text-white">@message.ContactName</h4>
                                        @if (message.IsMinorNotification)
                                        {
                                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300 mt-1">
                                                Parent Notification
                                            </span>
                                        }
                                    </div>
                                    <span class="text-xs text-gray-600 dark:text-gray-400">@message.PhoneNumber</span>
                                </div>
                                <div class="bg-white dark:bg-gray-800 rounded p-3 text-sm text-gray-700 dark:text-gray-300 border">
                                    @message.Message
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="bg-gray-50 dark:bg-gray-800 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-8 text-center">
                        <svg class="w-12 h-12 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                        </svg>
                        <p class="text-gray-500 dark:text-gray-400">Message preview will appear here</p>
                    </div>
                }
                
                @if (selectedContacts.Any(c => c.IsMinor))
                {
                    <div class="mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                        <div class="flex items-start">
                            <svg class="w-5 h-5 text-blue-600 dark:text-blue-400 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <div>
                                <h4 class="text-sm font-medium text-blue-900 dark:text-blue-100">Minor Contact Notice</h4>
                                <p class="text-sm text-blue-800 dark:text-blue-200 mt-1">A single SMS message will be sent to both parents of minors (if both have phone numbers).</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Navigation -->
        <div class="flex flex-col sm:flex-row justify-between items-stretch sm:items-center gap-3 mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
            <button class="btn-secondary order-2 sm:order-1" @onclick="PreviousStep" disabled="@isCreatingAppointment">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Previous
            </button>
            <button class="btn-primary order-1 sm:order-2 min-w-0 sm:min-w-[240px]" @onclick="CreateAppointment" disabled="@isCreatingAppointment">
                @if (isCreatingAppointment)
                {
                    <div class="flex items-center justify-center">
                        <div class="loading-spinner w-4 h-4 mr-2"></div>
                        <span>Creating...</span>
                    </div>
                }
                else
                {
                    <span>Create Appointment & Send Messages</span>
                }
            </button>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
@if (isLoading)
{
    <div class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center">
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-sm mx-4 text-center">
            <div class="loading-spinner w-8 h-8 mx-auto mb-4"></div>
            <p class="text-gray-900 dark:text-white font-medium">Loading appointment data...</p>
        </div>
    </div>
}

@code {
    // Navigation
    private int currentStep = 1;
    private bool isLoading = true;
    
    // Data collections
    private List<Contact> allContacts = new();
    private List<Leader> activeLeaders = new();
    private List<AppointmentType> appointmentTypes = new();
    private List<SmsMessage> previewMessages = new();
    
    // Selections
    private List<Contact> selectedContacts = new();
    private List<Leader> selectedLeaders = new();
    
    // Filters and search
    private string contactSearchTerm = "";
    private string contactGenderFilter = "";
    private string contactAgeFilter = "";
    
    // Form data
    private int? selectedAppointmentTypeId;
    private DateTime appointmentDate = GetNextSunday();
    private TimeOnly startTime = new TimeOnly(9, 0); // 9:00 AM
    private TimeOnly endTime = new TimeOnly(17, 0); // 5:00 PM
    
    // State
    private bool isCreatingAppointment = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoading = false;
    }

    private async Task LoadData()
    {
        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null) return;
        
        allContacts = await DbContext.Contacts
            .Include(c => c.HeadOfHouse)
                .ThenInclude(h => h!.Spouse)
            .Include(c => c.Spouse)
            .Where(c => c.UserId == currentUser.Id)
            .OrderBy(c => c.LastName)
            .ThenBy(c => c.FirstName)
            .ToListAsync();

        activeLeaders = await DbContext.Leaders
            .Where(l => l.IsActive && l.UserId == currentUser.Id)
            .OrderBy(l => l.Title)
            .ToListAsync();

        appointmentTypes = await DbContext.AppointmentTypes
            .Where(t => t.UserId == currentUser.Id)
            .OrderBy(t => t.Name)
            .ToListAsync();
    }

    private IEnumerable<Contact> filteredContacts
    {
        get
        {
            var filtered = allContacts.Where(c => !selectedContacts.Contains(c));

            if (!string.IsNullOrWhiteSpace(contactSearchTerm))
            {
                filtered = filtered.Where(c =>
                    c.FirstName.Contains(contactSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (!string.IsNullOrEmpty(c.MiddleName) && c.MiddleName.Contains(contactSearchTerm, StringComparison.OrdinalIgnoreCase)) ||
                    c.LastName.Contains(contactSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (c.PhoneNumber != null && c.PhoneNumber.Contains(contactSearchTerm)));
            }

            if (!string.IsNullOrWhiteSpace(contactGenderFilter))
            {
                filtered = filtered.Where(c => c.Gender.ToString() == contactGenderFilter);
            }

            if (!string.IsNullOrWhiteSpace(contactAgeFilter))
            {
                filtered = contactAgeFilter switch
                {
                    "minor" => filtered.Where(c => c.IsMinor),
                    "adult" => filtered.Where(c => !c.IsMinor),
                    _ => filtered
                };
            }

            return filtered;
        }
    }

    private AppointmentType? selectedAppointmentType => 
        selectedAppointmentTypeId.HasValue ? appointmentTypes.FirstOrDefault(t => t.Id == selectedAppointmentTypeId.Value) : null;

    private static DateTime GetNextSunday()
    {
        var today = DateTime.Today;
        var daysUntilSunday = ((int)DayOfWeek.Sunday - (int)today.DayOfWeek + 7) % 7;
        return daysUntilSunday == 0 ? today.AddDays(7) : today.AddDays(daysUntilSunday); // If today is Sunday, get next Sunday
    }

    // Step indicator methods
    private string GetMobileStepClass(int step)
    {
        if (step < currentStep)
            return "bg-primary-600 text-white";
        else if (step == currentStep)
            return "bg-primary-600 text-white ring-4 ring-primary-100 dark:ring-primary-900/50";
        else
            return "bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-400";
    }

    private string GetDesktopStepClass(int step)
    {
        if (step < currentStep)
            return "bg-primary-600 text-white";
        else if (step == currentStep)
            return "bg-primary-600 text-white ring-4 ring-primary-100 dark:ring-primary-900/50";
        else
            return "bg-gray-300 dark:bg-gray-600 text-gray-600 dark:text-gray-400";
    }

    private string GetStepTitle(int step)
    {
        return step switch
        {
            1 => "Select Contacts",
            2 => "Choose Leaders",
            3 => "Appointment Details",
            4 => "Review & Send",
            _ => ""
        };
    }

    private string GetStepDescription(int step)
    {
        return step switch
        {
            1 => "Choose people to schedule",
            2 => "Select available leaders",
            3 => "Set date and time",
            4 => "Confirm and create",
            _ => ""
        };
    }

    // Navigation methods
    private void NextStep()
    {
        if (currentStep == 3)
        {
            GenerateSmsPreview();
        }
        currentStep++;
    }

    private void PreviousStep()
    {
        currentStep--;
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/appointments");
    }

    // Selection methods
    private void SelectContact(Contact contact)
    {
        selectedContacts.Add(contact);
    }

    private void RemoveContact(Contact contact)
    {
        selectedContacts.Remove(contact);
    }

    private void ToggleLeader(Leader leader)
    {
        if (selectedLeaders.Contains(leader))
        {
            selectedLeaders.Remove(leader);
        }
        else
        {
            selectedLeaders.Add(leader);
        }
    }

    private void GenerateSmsPreview()
    {
        if (selectedContacts.Count == 0 || !selectedLeaders.Any() || selectedAppointmentType == null)
        {
            previewMessages = new List<SmsMessage>();
            return;
        }

        // Generate preview messages for automatic scheduling
        previewMessages = GenerateAutoSchedulePreview();
    }

    private List<SmsMessage> GenerateAutoSchedulePreview()
    {
        var messages = new List<SmsMessage>();
        var scheduledAppointments = GenerateSchedulePlan();
        
        foreach (var scheduled in scheduledAppointments)
        {
            var contact = selectedContacts.First(c => c.Id == scheduled.ContactId);
            var leader = selectedLeaders.First(l => l.Id == scheduled.LeaderId);
            
            var contactMessages = SmsService.GenerateAppointmentMessages(
                new List<Contact> { contact }, 
                leader, 
                selectedAppointmentType!, 
                scheduled.ScheduledTime);
            
            messages.AddRange(contactMessages);
        }
        
        return messages;
    }

    private List<ScheduledAppointment> GenerateSchedulePlan()
    {
        var plan = new List<ScheduledAppointment>();
        var currentTime = appointmentDate.Date.Add(startTime.ToTimeSpan());
        var appointmentDuration = selectedAppointmentType!.Duration;
        var searchEnd = appointmentDate.Date.Add(endTime.ToTimeSpan());
        
        var scheduledTimes = new HashSet<(int leaderId, DateTime time)>(); // Track scheduled appointments per leader
        
        foreach (var contact in selectedContacts)
        {
            var assigned = false;
            var timeToTry = currentTime;
            
            // Try to find an available slot starting from current time
            while (!assigned && timeToTry.AddMinutes(appointmentDuration) <= searchEnd)
            {
                // Check if any leader is available at this time
                foreach (var leader in selectedLeaders)
                {
                    var slotKey = (leader.Id, timeToTry);
                    
                    // Check if this leader already has an appointment at this time
                    if (!scheduledTimes.Contains(slotKey))
                    {
                        // For preview purposes, assume available (real check happens during creation)
                        plan.Add(new ScheduledAppointment
                        {
                            ContactId = contact.Id,
                            LeaderId = leader.Id,
                            ScheduledTime = timeToTry
                        });
                        
                        scheduledTimes.Add(slotKey);
                        assigned = true;
                        break; // Found a leader for this contact, move to next contact
                    }
                }
                
                if (!assigned)
                {
                    // No leader available at this time, try next time slot
                    timeToTry = timeToTry.AddMinutes(appointmentDuration);
                }
            }
            
            if (!assigned)
            {
                // Could not schedule this contact - no more available slots
                break;
            }
            
            // For the next contact, try the same time first (in case multiple leaders are available)
            // If not available, the algorithm will naturally move to the next time slot
        }
        
        return plan;
    }

    private class ScheduledAppointment
    {
        public int ContactId { get; set; }
        public int LeaderId { get; set; }
        public DateTime ScheduledTime { get; set; }
    }

    private async Task CreateAppointment()
    {
        if (selectedContacts.Count == 0 || !selectedLeaders.Any() || selectedAppointmentType == null)
            return;

        var currentUser = await UserService.GetCurrentUserAsync();
        if (currentUser == null) return;

        isCreatingAppointment = true;
        try
        {
            // Generate the scheduling plan with real availability checking
            var schedulePlan = await GenerateRealSchedulePlan();
            var appointmentsCreated = 0;
            var calendarEventsCreated = 0;
            var unscheduledContacts = new List<string>();

            // Create appointments based on the schedule plan
            foreach (var scheduled in schedulePlan)
            {
                var appointment = new Appointment
                {
                    ContactId = scheduled.ContactId,
                    LeaderId = scheduled.LeaderId,
                    AppointmentTypeId = selectedAppointmentType.Id,
                    ScheduledTime = scheduled.ScheduledTime,
                    Status = AppointmentStatus.Pending,
                    CreatedDate = DateTime.Now,
                    UserId = currentUser.Id
                };

                DbContext.Appointments.Add(appointment);
                appointmentsCreated++;
            }

            // Check for unscheduled contacts
            var scheduledContactIds = schedulePlan.Select(s => s.ContactId).ToHashSet();
            foreach (var contact in selectedContacts)
            {
                if (!scheduledContactIds.Contains(contact.Id))
                {
                    unscheduledContacts.Add($"{contact.FullName}");
                }
            }

            await DbContext.SaveChangesAsync();

            // Create calendar events for each scheduled appointment
            foreach (var scheduled in schedulePlan)
            {
                var leader = selectedLeaders.First(l => l.Id == scheduled.LeaderId);
                
                if (!string.IsNullOrEmpty(leader.GoogleCalendarId))
                {
                    try
                    {
                        var appointment = await DbContext.Appointments
                            .Include(a => a.Contact)
                            .Include(a => a.Leader)
                            .Include(a => a.AppointmentType)
                            .FirstOrDefaultAsync(a => a.ContactId == scheduled.ContactId && 
                                                      a.LeaderId == scheduled.LeaderId &&
                                                      a.ScheduledTime == scheduled.ScheduledTime);

                        if (appointment != null)
                        {
                            var eventId = await CalendarService.CreateEventAsync(leader.GoogleCalendarId, appointment);
                            if (!string.IsNullOrEmpty(eventId))
                            {
                                appointment.GoogleEventId = eventId;
                                calendarEventsCreated++;
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        // Log calendar creation failure but continue
                        Logger.LogError(ex, $"Failed to create calendar event for {leader.Name}");
                    }
                }
            }

            await DbContext.SaveChangesAsync();

            // Generate success message
            var message = $"Automatic scheduling completed!\n\n";
            message += $"✅ {appointmentsCreated} appointments created\n";
            message += $"📅 {calendarEventsCreated} calendar events created\n";
            
            if (unscheduledContacts.Any())
            {
                message += $"\n⚠️ Could not schedule {unscheduledContacts.Count} contact(s):\n";
                message += string.Join("\n", unscheduledContacts);
                message += "\n\nPlease try:\n- Selecting a different time range\n- Adding more leaders\n- Choosing a different date";
            }
            else
            {
                message += "\n🎉 All contacts successfully scheduled!";
            }

            await JSRuntime.InvokeVoidAsync("alert", message);
            Navigation.NavigateTo("/appointments");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating appointments: {ex.Message}");
        }
        finally
        {
            isCreatingAppointment = false;
        }
    }

    private async Task<List<ScheduledAppointment>> GenerateRealSchedulePlan()
    {
        var plan = new List<ScheduledAppointment>();
        var currentTime = appointmentDate.Date.Add(startTime.ToTimeSpan());
        var appointmentDuration = selectedAppointmentType!.Duration;
        var searchEnd = appointmentDate.Date.Add(endTime.ToTimeSpan());
        
        var scheduledTimes = new HashSet<(int leaderId, DateTime time)>(); // Track scheduled appointments per leader
        
        foreach (var contact in selectedContacts)
        {
            var assigned = false;
            var timeToTry = currentTime;
            
            // Try to find an available slot starting from current time
            while (!assigned && timeToTry.AddMinutes(appointmentDuration) <= searchEnd)
            {
                // Check if any leader is available at this time
                foreach (var leader in selectedLeaders)
                {
                    var slotKey = (leader.Id, timeToTry);
                    
                    // Check if this leader already has an appointment at this time
                    if (!scheduledTimes.Contains(slotKey))
                    {
                        // Check if leader is actually available at this time
                        var isAvailable = await IsLeaderAvailableAtTime(leader, timeToTry, appointmentDuration);
                        
                        if (isAvailable)
                        {
                            plan.Add(new ScheduledAppointment
                            {
                                ContactId = contact.Id,
                                LeaderId = leader.Id,
                                ScheduledTime = timeToTry
                            });
                            
                            scheduledTimes.Add(slotKey);
                            assigned = true;
                            break; // Found a leader for this contact, move to next contact
                        }
                    }
                }
                
                if (!assigned)
                {
                    // No leader available at this time, try next time slot
                    timeToTry = timeToTry.AddMinutes(appointmentDuration);
                }
            }
            
            if (!assigned)
            {
                // Could not schedule this contact - no more available slots
                break;
            }
            
            // For the next contact, try the same time first (in case multiple leaders are available)
            // If not available, the algorithm will naturally move to the next time slot
        }
        
        return plan;
    }

    private async Task<bool> IsLeaderAvailableAtTime(Leader leader, DateTime startTime, int durationMinutes)
    {
        try
        {
            var endTime = startTime.AddMinutes(durationMinutes);
            
            // Check existing appointments in database
            var hasExistingAppt = await DbContext.Appointments
                .AnyAsync(a => a.LeaderId == leader.Id && 
                             a.ScheduledTime < endTime && 
                             a.ScheduledTime.AddMinutes(selectedAppointmentType!.Duration) > startTime);
            
            if (hasExistingAppt)
                return false;
                
            // Check Google Calendar if available
            if (!string.IsNullOrEmpty(leader.GoogleCalendarId))
            {
                return await CalendarService.IsTimeSlotAvailableAsync(
                    leader.GoogleCalendarId, 
                    startTime, 
                    endTime);
            }
            
            return true; // If no calendar, assume available
        }
        catch
        {
            return false; // If error checking, assume not available for safety
        }
    }
}